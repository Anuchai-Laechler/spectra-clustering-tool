-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AFAProcess_HW_searchBestMatchComplete_HW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_baseAddr_AWVALID : OUT STD_LOGIC;
    m_axi_baseAddr_AWREADY : IN STD_LOGIC;
    m_axi_baseAddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_WVALID : OUT STD_LOGIC;
    m_axi_baseAddr_WREADY : IN STD_LOGIC;
    m_axi_baseAddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_WLAST : OUT STD_LOGIC;
    m_axi_baseAddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_ARVALID : OUT STD_LOGIC;
    m_axi_baseAddr_ARREADY : IN STD_LOGIC;
    m_axi_baseAddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_RVALID : IN STD_LOGIC;
    m_axi_baseAddr_RREADY : OUT STD_LOGIC;
    m_axi_baseAddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_RLAST : IN STD_LOGIC;
    m_axi_baseAddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_BVALID : IN STD_LOGIC;
    m_axi_baseAddr_BREADY : OUT STD_LOGIC;
    m_axi_baseAddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    baseAddr1 : IN STD_LOGIC_VECTOR (29 downto 0);
    spectraDataInputHW_IndexToMem : IN STD_LOGIC_VECTOR (61 downto 0);
    spectraDataWorkingSetHW_IndexT : IN STD_LOGIC_VECTOR (61 downto 0);
    m_gridSizeSqr : IN STD_LOGIC_VECTOR (31 downto 0);
    spectraIndex : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of AFAProcess_HW_searchBestMatchComplete_HW is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7F7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111011111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001101";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv33_1CB : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111001011";
    constant ap_const_lv33_1CC : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111001100";
    constant ap_const_lv9_1CA : STD_LOGIC_VECTOR (8 downto 0) := "111001010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_58 : BOOLEAN;
    signal reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_141 : BOOLEAN;
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal tmp_1_cast_fu_244_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_cast_reg_674 : STD_LOGIC_VECTOR (32 downto 0);
    signal spectraDataWorkingSetHW_IndexT_1_fu_248_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal spectraDataWorkingSetHW_IndexT_1_reg_679 : STD_LOGIC_VECTOR (62 downto 0);
    signal spectraDataInputHW_IndexToMem_s_fu_252_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal spectraDataInputHW_IndexToMem_s_reg_686 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_cast_fu_256_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_cast_reg_691 : STD_LOGIC_VECTOR (62 downto 0);
    signal m_gridSizeSqr_assign_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_gridSizeSqr_assign_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal tmp_2_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jInc_fu_308_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal jInc_reg_707 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_196 : BOOLEAN;
    signal jInc_cast8_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal jInc_cast8_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_721 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal tmp_8_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal tmp_cast_fu_346_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_reg_736 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal baseAddr_addr_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal baseAddr_addr_1_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_241 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_baseAddr_ARREADY : STD_LOGIC;
    signal tmp_10_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_254 : BOOLEAN;
    signal k_3_fu_431_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_3_reg_761 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_263 : BOOLEAN;
    signal baseAddr_addr_2_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal baseAddr_addr_3_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmpVal1Float_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_283 : BOOLEAN;
    signal tmpVal2Float_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_294 : BOOLEAN;
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_303 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_311 : BOOLEAN;
    signal k_2_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_2_reg_807 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_320 : BOOLEAN;
    signal exitcond_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bestMatch_index_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatch_index_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_340 : BOOLEAN;
    signal err_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatch_error_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal err_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal err_ce0 : STD_LOGIC;
    signal err_we0 : STD_LOGIC;
    signal err_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_166 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_178 : STD_LOGIC_VECTOR (8 downto 0);
    signal error_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_202 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_377 : BOOLEAN;
    signal tmp_15_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_baseAddr_ARREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_404 : BOOLEAN;
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_417 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_430 : BOOLEAN;
    signal outbm_error_write_assign_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatch_error_1_fu_637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal outbm_index_write_assign_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatch_index_1_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_468 : BOOLEAN;
    signal tmp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_298_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast7_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_349_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_cast_fu_355_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_359_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum_fu_364_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp2_fu_379_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_cast_fu_384_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_fu_388_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum3_fu_393_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_437_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_fu_441_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_cast_fu_446_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_21_fu_450_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum6_fu_455_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp4_fu_470_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp4_cast_fu_475_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_23_fu_479_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum9_fu_484_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal k_1_cast5_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatch_error_to_int_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatch_1_1_to_int_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_552_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_562_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_569_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_579_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_213_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_213_ce : STD_LOGIC;
    signal grp_fu_218_ce : STD_LOGIC;
    signal tmp_22_fu_222_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component AFAProcess_HW_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_fmul_32ns_32ns_32_3_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component AFAProcess_HW_searchBestMatchComplete_HW_err IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    err_U : component AFAProcess_HW_searchBestMatchComplete_HW_err
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => err_address0,
        ce0 => err_ce0,
        we0 => err_we0,
        d0 => err_d0,
        q0 => err_q0);

    AFAProcess_HW_faddfsub_32ns_32ns_32_5_full_dsp_U0 : component AFAProcess_HW_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        opcode => grp_fu_213_opcode,
        ce => grp_fu_213_ce,
        dout => grp_fu_213_p2);

    AFAProcess_HW_fmul_32ns_32ns_32_3_max_dsp_U1 : component AFAProcess_HW_fmul_32ns_32ns_32_3_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d_reg_788,
        din1 => d_reg_788,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p2);

    AFAProcess_HW_fcmp_32ns_32ns_1_1_U2 : component AFAProcess_HW_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => err_q0,
        din1 => outbm_error_write_assign_fu_74,
        opcode => tmp_22_fu_222_opcode,
        dout => tmp_22_fu_222_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_baseAddr_ARREADY assign process. --
    ap_reg_ioackin_m_axi_baseAddr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)))) then 
                    ap_reg_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_logic_1 = m_axi_baseAddr_ARREADY)) or ((ap_const_logic_1 = m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) or ((ap_const_logic_1 = m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) or ((ap_const_logic_1 = m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)))) then 
                    ap_reg_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- error_reg_189 assign process. --
    error_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = tmp_10_fu_414_p2)))) then 
                error_reg_189 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                error_reg_189 <= grp_fu_213_p2;
            end if; 
        end if;
    end process;

    -- i_reg_166 assign process. --
    i_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and ((ap_const_lv1_0 = tmp_10_reg_754) or not((ap_const_lv1_0 = exitcond1_fu_425_p2))))) then 
                i_reg_166 <= i_1_reg_721;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_166 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- j_reg_154 assign process. --
    j_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = exitcond_fu_518_p2)))) then 
                j_reg_154 <= j_1_fu_540_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_154 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_202 assign process. --
    k_1_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_324_p2)))) then 
                k_1_reg_202 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                k_1_reg_202 <= k_2_reg_807;
            end if; 
        end if;
    end process;

    -- k_reg_178 assign process. --
    k_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = tmp_10_fu_414_p2)))) then 
                k_reg_178 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                k_reg_178 <= k_3_reg_761;
            end if; 
        end if;
    end process;

    -- outbm_error_write_assign_fu_74 assign process. --
    outbm_error_write_assign_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                outbm_error_write_assign_fu_74 <= bestMatch_error_1_fu_637_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                outbm_error_write_assign_fu_74 <= ap_const_lv32_7F7FFFFF;
            end if; 
        end if;
    end process;

    -- outbm_index_write_assign_fu_78 assign process. --
    outbm_index_write_assign_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                outbm_index_write_assign_fu_78 <= bestMatch_index_1_fu_630_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                outbm_index_write_assign_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY)))) then
                baseAddr_addr_1_reg_748 <= sum3_cast_fu_398_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_10_reg_754)) and (ap_const_lv1_0 = exitcond1_fu_425_p2))) then
                baseAddr_addr_2_reg_766 <= sum6_cast_fu_460_p1(32 - 1 downto 0);
                baseAddr_addr_3_reg_772 <= sum9_cast_fu_489_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                baseAddr_addr_reg_742 <= sum_cast_fu_369_p1(32 - 1 downto 0);
                    tmp_cast_reg_736(31 downto 0) <= tmp_cast_fu_346_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then
                bestMatch_error_reg_833 <= err_q0;
                tmp_22_reg_839 <= tmp_22_fu_222_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and (ap_const_lv1_0 = exitcond_fu_518_p2))) then
                bestMatch_index_reg_817 <= bestMatch_index_fu_534_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                d_reg_788 <= grp_fu_213_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_1_reg_721 <= i_1_fu_329_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    jInc_cast8_reg_713(8 downto 0) <= jInc_cast8_fu_316_p1(8 downto 0);
                jInc_reg_707 <= jInc_fu_308_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then
                k_2_reg_807 <= k_2_fu_523_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_10_reg_754)))) then
                k_3_reg_761 <= k_3_fu_431_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_2_fu_270_p2)))) then
                m_gridSizeSqr_assign_reg_702 <= m_gridSizeSqr_assign_fu_286_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((m_axi_baseAddr_RVALID = ap_const_logic_0))) or (not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)))) then
                reg_230 <= m_axi_baseAddr_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) or (not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)))) then
                reg_234 <= m_axi_baseAddr_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    sext_cast_reg_691(29 downto 0) <= sext_cast_fu_256_p1(29 downto 0);
                    spectraDataInputHW_IndexToMem_s_reg_686(61 downto 0) <= spectraDataInputHW_IndexToMem_s_fu_252_p1(61 downto 0);
                    spectraDataWorkingSetHW_IndexT_1_reg_679(61 downto 0) <= spectraDataWorkingSetHW_IndexT_1_fu_248_p1(61 downto 0);
                    tmp_1_cast_reg_674(31 downto 0) <= tmp_1_cast_fu_244_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                tmp_10_reg_754 <= tmp_10_fu_414_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                tmp_24_reg_794 <= grp_fu_218_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_324_p2))) then
                tmp_8_reg_726 <= tmp_8_fu_335_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_9_reg_731 <= tmp_9_fu_341_p2;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_674(32) <= '0';
    spectraDataWorkingSetHW_IndexT_1_reg_679(62) <= '0';
    spectraDataInputHW_IndexToMem_s_reg_686(62) <= '0';
    sext_cast_reg_691(62 downto 30) <= "000000000000000000000000000000000";
    jInc_cast8_reg_713(31 downto 9) <= "00000000000000000000000";
    tmp_cast_reg_736(32) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, m_axi_baseAddr_RVALID, tmp_2_fu_270_p2, exitcond2_fu_324_p2, ap_sig_ioackin_m_axi_baseAddr_ARREADY, tmp_10_reg_754, exitcond1_fu_425_p2, exitcond_fu_518_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = tmp_2_fu_270_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_324_p2))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (not((m_axi_baseAddr_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not((m_axi_baseAddr_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (((ap_const_lv1_0 = tmp_10_reg_754) or not((ap_const_lv1_0 = exitcond1_fu_425_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                if (not((m_axi_baseAddr_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st24_fsm_23 => 
                if (not((m_axi_baseAddr_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st38_fsm_37 => 
                if (not((ap_const_lv1_0 = exitcond_fu_518_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_270_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_2_fu_270_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_270_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_2_fu_270_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= outbm_index_write_assign_fu_78;

    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_141 assign process. --
    ap_sig_bdd_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_141 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_196 assign process. --
    ap_sig_bdd_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_196 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_241 assign process. --
    ap_sig_bdd_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_241 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_254 assign process. --
    ap_sig_bdd_254_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_254 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_263 assign process. --
    ap_sig_bdd_263_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_263 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_283 assign process. --
    ap_sig_bdd_283_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_283 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_294 assign process. --
    ap_sig_bdd_294_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_294 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_303 assign process. --
    ap_sig_bdd_303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_303 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_311 assign process. --
    ap_sig_bdd_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_311 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_320 assign process. --
    ap_sig_bdd_320_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_320 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_340 assign process. --
    ap_sig_bdd_340_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_340 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_377 assign process. --
    ap_sig_bdd_377_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_377 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_404 assign process. --
    ap_sig_bdd_404_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_404 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_417 assign process. --
    ap_sig_bdd_417_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_417 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_430 assign process. --
    ap_sig_bdd_430_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_430 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_468 assign process. --
    ap_sig_bdd_468_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_468 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_58 assign process. --
    ap_sig_bdd_58_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_58 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_254)
    begin
        if (ap_sig_bdd_254) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_263)
    begin
        if (ap_sig_bdd_263) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_417)
    begin
        if (ap_sig_bdd_417) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_430)
    begin
        if (ap_sig_bdd_430) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_58)
    begin
        if (ap_sig_bdd_58) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_141)
    begin
        if (ap_sig_bdd_141) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_283)
    begin
        if (ap_sig_bdd_283) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_294)
    begin
        if (ap_sig_bdd_294) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_303)
    begin
        if (ap_sig_bdd_303) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_468)
    begin
        if (ap_sig_bdd_468) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_311)
    begin
        if (ap_sig_bdd_311) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_320)
    begin
        if (ap_sig_bdd_320) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_340)
    begin
        if (ap_sig_bdd_340) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_196)
    begin
        if (ap_sig_bdd_196) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_377)
    begin
        if (ap_sig_bdd_377) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_241)
    begin
        if (ap_sig_bdd_241) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_404)
    begin
        if (ap_sig_bdd_404) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_baseAddr_ARREADY assign process. --
    ap_sig_ioackin_m_axi_baseAddr_ARREADY_assign_proc : process(m_axi_baseAddr_ARREADY, ap_reg_ioackin_m_axi_baseAddr_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY)) then 
            ap_sig_ioackin_m_axi_baseAddr_ARREADY <= m_axi_baseAddr_ARREADY;
        else 
            ap_sig_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bestMatch_1_1_to_int_fu_566_p1 <= outbm_error_write_assign_fu_74;
    bestMatch_error_1_fu_637_p3 <= 
        bestMatch_error_reg_833 when (tmp_25_fu_625_p2(0) = '1') else 
        outbm_error_write_assign_fu_74;
    bestMatch_error_to_int_fu_549_p1 <= bestMatch_error_reg_833;
    bestMatch_index_1_fu_630_p3 <= 
        bestMatch_index_reg_817 when (tmp_25_fu_625_p2(0) = '1') else 
        outbm_index_write_assign_fu_78;
    bestMatch_index_fu_534_p2 <= std_logic_vector(unsigned(k_1_cast5_fu_514_p1) + unsigned(j_reg_154));

    -- err_address0 assign process. --
    err_address0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st38_fsm_37, tmp_15_fu_420_p1, tmp_18_fu_499_p1, tmp_11_fu_529_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            err_address0 <= tmp_18_fu_499_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            err_address0 <= tmp_15_fu_420_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            err_address0 <= tmp_11_fu_529_p1(8 - 1 downto 0);
        else 
            err_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- err_ce0 assign process. --
    err_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st38_fsm_37)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then 
            err_ce0 <= ap_const_logic_1;
        else 
            err_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- err_d0 assign process. --
    err_d0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, error_reg_189)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            err_d0 <= error_reg_189;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            err_d0 <= ap_const_lv32_7F7FFFFF;
        else 
            err_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- err_we0 assign process. --
    err_we0_assign_proc : process(tmp_10_fu_414_p2, tmp_10_reg_754, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, exitcond1_fu_425_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (ap_const_lv1_0 = tmp_10_fu_414_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_10_reg_754)) and not((ap_const_lv1_0 = exitcond1_fu_425_p2))))) then 
            err_we0 <= ap_const_logic_1;
        else 
            err_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_425_p2 <= "1" when (k_reg_178 = ap_const_lv9_1CA) else "0";
    exitcond2_fu_324_p2 <= "1" when (i_reg_166 = jInc_reg_707) else "0";
    exitcond_fu_518_p2 <= "1" when (k_1_reg_202 = jInc_reg_707) else "0";
    grp_fu_213_ce <= ap_const_logic_1;

    -- grp_fu_213_opcode assign process. --
    grp_fu_213_opcode_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_213_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_213_opcode <= ap_const_lv2_0;
        else 
            grp_fu_213_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_213_p0 assign process. --
    grp_fu_213_p0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, tmpVal2Float_fu_509_p1, error_reg_189, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_213_p0 <= error_reg_189;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_213_p0 <= tmpVal2Float_fu_509_p1;
        else 
            grp_fu_213_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_213_p1 assign process. --
    grp_fu_213_p1_assign_proc : process(tmpVal1Float_fu_504_p1, ap_sig_cseq_ST_st25_fsm_24, tmp_24_reg_794, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_213_p1 <= tmp_24_reg_794;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_213_p1 <= tmpVal1Float_fu_504_p1;
        else 
            grp_fu_213_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_218_ce <= ap_const_logic_1;
    i_1_fu_329_p2 <= std_logic_vector(unsigned(i_reg_166) + unsigned(ap_const_lv9_1));
    i_cast7_fu_320_p1 <= std_logic_vector(resize(unsigned(i_reg_166),32));
    jInc_cast8_fu_316_p1 <= std_logic_vector(resize(unsigned(jInc_fu_308_p3),32));
    jInc_fu_308_p3 <= 
        ap_const_lv9_100 when (tmp_7_fu_302_p2(0) = '1') else 
        tmp_13_fu_298_p1;
    j_1_fu_540_p2 <= std_logic_vector(unsigned(jInc_cast8_reg_713) + unsigned(j_reg_154));
    k_1_cast5_fu_514_p1 <= std_logic_vector(resize(unsigned(k_1_reg_202),32));
    k_2_fu_523_p2 <= std_logic_vector(unsigned(k_1_reg_202) + unsigned(ap_const_lv9_1));
    k_3_fu_431_p2 <= std_logic_vector(unsigned(k_reg_178) + unsigned(ap_const_lv9_1));

    -- m_axi_baseAddr_ARADDR assign process. --
    m_axi_baseAddr_ARADDR_assign_proc : process(baseAddr_addr_reg_742, baseAddr_addr_1_reg_748, ap_sig_cseq_ST_st7_fsm_6, baseAddr_addr_2_reg_766, baseAddr_addr_3_reg_772, ap_reg_ioackin_m_axi_baseAddr_ARREADY, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                m_axi_baseAddr_ARADDR <= baseAddr_addr_3_reg_772;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                m_axi_baseAddr_ARADDR <= baseAddr_addr_2_reg_766;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                m_axi_baseAddr_ARADDR <= baseAddr_addr_1_reg_748;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                m_axi_baseAddr_ARADDR <= baseAddr_addr_reg_742;
            else 
                m_axi_baseAddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_baseAddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_baseAddr_ARBURST <= ap_const_lv2_0;
    m_axi_baseAddr_ARCACHE <= ap_const_lv4_0;
    m_axi_baseAddr_ARID <= ap_const_lv1_0;
    m_axi_baseAddr_ARLEN <= ap_const_lv32_1;
    m_axi_baseAddr_ARLOCK <= ap_const_lv2_0;
    m_axi_baseAddr_ARPROT <= ap_const_lv3_0;
    m_axi_baseAddr_ARQOS <= ap_const_lv4_0;
    m_axi_baseAddr_ARREGION <= ap_const_lv4_0;
    m_axi_baseAddr_ARSIZE <= ap_const_lv3_0;
    m_axi_baseAddr_ARUSER <= ap_const_lv1_0;

    -- m_axi_baseAddr_ARVALID assign process. --
    m_axi_baseAddr_ARVALID_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_reg_ioackin_m_axi_baseAddr_ARREADY, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)))) then 
            m_axi_baseAddr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_baseAddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_baseAddr_AWADDR <= ap_const_lv32_0;
    m_axi_baseAddr_AWBURST <= ap_const_lv2_0;
    m_axi_baseAddr_AWCACHE <= ap_const_lv4_0;
    m_axi_baseAddr_AWID <= ap_const_lv1_0;
    m_axi_baseAddr_AWLEN <= ap_const_lv32_0;
    m_axi_baseAddr_AWLOCK <= ap_const_lv2_0;
    m_axi_baseAddr_AWPROT <= ap_const_lv3_0;
    m_axi_baseAddr_AWQOS <= ap_const_lv4_0;
    m_axi_baseAddr_AWREGION <= ap_const_lv4_0;
    m_axi_baseAddr_AWSIZE <= ap_const_lv3_0;
    m_axi_baseAddr_AWUSER <= ap_const_lv1_0;
    m_axi_baseAddr_AWVALID <= ap_const_logic_0;
    m_axi_baseAddr_BREADY <= ap_const_logic_0;

    -- m_axi_baseAddr_RREADY assign process. --
    m_axi_baseAddr_RREADY_assign_proc : process(m_axi_baseAddr_RVALID, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((m_axi_baseAddr_RVALID = ap_const_logic_0))) or (not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) or (not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) or (not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)))) then 
            m_axi_baseAddr_RREADY <= ap_const_logic_1;
        else 
            m_axi_baseAddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_baseAddr_WDATA <= ap_const_lv32_0;
    m_axi_baseAddr_WID <= ap_const_lv1_0;
    m_axi_baseAddr_WLAST <= ap_const_logic_0;
    m_axi_baseAddr_WSTRB <= ap_const_lv4_0;
    m_axi_baseAddr_WUSER <= ap_const_lv1_0;
    m_axi_baseAddr_WVALID <= ap_const_logic_0;
    m_gridSizeSqr_assign_fu_286_p3 <= 
        m_gridSizeSqr when (tmp_4_fu_281_p2(0) = '1') else 
        tmp_3_fu_275_p2;
    notlhs3_fu_601_p2 <= "0" when (tmp_14_fu_569_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_583_p2 <= "0" when (tmp_12_fu_552_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_607_p2 <= "1" when (tmp_26_fu_579_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_589_p2 <= "1" when (tmp_16_fu_562_p1 = ap_const_lv23_0) else "0";
    sext_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(baseAddr1),63));
    spectraDataInputHW_IndexToMem_s_fu_252_p1 <= std_logic_vector(resize(unsigned(spectraDataInputHW_IndexToMem),63));
    spectraDataWorkingSetHW_IndexT_1_fu_248_p1 <= std_logic_vector(resize(unsigned(spectraDataWorkingSetHW_IndexT),63));
    sum3_cast_fu_398_p1 <= std_logic_vector(resize(unsigned(sum3_fu_393_p2),64));
    sum3_fu_393_p2 <= std_logic_vector(unsigned(sext_cast_reg_691) + unsigned(tmp_1_fu_388_p2));
    sum6_cast_fu_460_p1 <= std_logic_vector(resize(unsigned(sum6_fu_455_p2),64));
    sum6_fu_455_p2 <= std_logic_vector(unsigned(sext_cast_reg_691) + unsigned(tmp_21_fu_450_p2));
    sum9_cast_fu_489_p1 <= std_logic_vector(resize(unsigned(sum9_fu_484_p2),64));
    sum9_fu_484_p2 <= std_logic_vector(unsigned(sext_cast_reg_691) + unsigned(tmp_23_fu_479_p2));
    sum_cast_fu_369_p1 <= std_logic_vector(resize(unsigned(sum_fu_364_p2),64));
    sum_fu_364_p2 <= std_logic_vector(unsigned(sext_cast_reg_691) + unsigned(tmp_s_fu_359_p2));
    tmp1_cast_fu_355_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_349_p2),63));
    tmp1_fu_349_p2 <= std_logic_vector(unsigned(tmp_cast_fu_346_p1) + unsigned(ap_const_lv33_1CB));
    tmp2_cast_fu_384_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_379_p2),63));
    tmp2_fu_379_p2 <= std_logic_vector(unsigned(tmp_cast_reg_736) + unsigned(ap_const_lv33_1CC));
    tmp3_cast_fu_446_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_441_p2),63));
    tmp3_fu_441_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_437_p1) + unsigned(tmp_1_cast_reg_674));
    tmp4_cast_fu_475_p1 <= std_logic_vector(resize(unsigned(tmp4_fu_470_p2),63));
    tmp4_fu_470_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_437_p1) + unsigned(tmp_cast_reg_736));
    tmpVal1Float_fu_504_p1 <= reg_230;
    tmpVal2Float_fu_509_p1 <= reg_234;
    tmp_10_fu_414_p2 <= "1" when (tmp_5_fu_408_p2 = ap_const_lv32_0) else "0";
    tmp_11_fu_529_p1 <= std_logic_vector(resize(unsigned(k_1_reg_202),64));
    tmp_12_fu_552_p4 <= bestMatch_error_to_int_fu_549_p1(30 downto 23);
    tmp_13_fu_298_p1 <= tmp_6_fu_293_p2(9 - 1 downto 0);
    tmp_14_fu_569_p4 <= bestMatch_1_1_to_int_fu_566_p1(30 downto 23);
    tmp_15_fu_420_p1 <= std_logic_vector(resize(unsigned(i_reg_166),64));
    tmp_16_fu_562_p1 <= bestMatch_error_to_int_fu_549_p1(23 - 1 downto 0);
    tmp_17_fu_595_p2 <= (notrhs_fu_589_p2 or notlhs_fu_583_p2);
    tmp_18_fu_499_p1 <= std_logic_vector(resize(unsigned(i_reg_166),64));
    tmp_19_cast_fu_437_p1 <= std_logic_vector(resize(unsigned(k_reg_178),33));
    tmp_19_fu_613_p2 <= (notrhs4_fu_607_p2 or notlhs3_fu_601_p2);
    tmp_1_cast_fu_244_p1 <= std_logic_vector(resize(unsigned(tmp_fu_238_p2),33));
    tmp_1_fu_388_p2 <= std_logic_vector(unsigned(spectraDataWorkingSetHW_IndexT_1_reg_679) + unsigned(tmp2_cast_fu_384_p1));
    tmp_20_fu_619_p2 <= (tmp_17_fu_595_p2 and tmp_19_fu_613_p2);
    tmp_21_fu_450_p2 <= std_logic_vector(unsigned(spectraDataInputHW_IndexToMem_s_reg_686) + unsigned(tmp3_cast_fu_446_p1));
    tmp_22_fu_222_opcode <= ap_const_lv5_4;
    tmp_23_fu_479_p2 <= std_logic_vector(unsigned(spectraDataWorkingSetHW_IndexT_1_reg_679) + unsigned(tmp4_cast_fu_475_p1));
    tmp_25_fu_625_p2 <= (tmp_20_fu_619_p2 and tmp_22_reg_839);
    tmp_26_fu_579_p1 <= bestMatch_1_1_to_int_fu_566_p1(23 - 1 downto 0);
    tmp_2_fu_270_p2 <= "1" when (unsigned(j_reg_154) < unsigned(m_gridSizeSqr)) else "0";
    tmp_3_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv32_100) + unsigned(j_reg_154));
    tmp_4_fu_281_p2 <= "1" when (unsigned(tmp_3_fu_275_p2) > unsigned(m_gridSizeSqr)) else "0";
    tmp_5_fu_408_p2 <= (reg_234 or reg_230);
    tmp_6_fu_293_p2 <= std_logic_vector(unsigned(m_gridSizeSqr_assign_reg_702) - unsigned(j_reg_154));
    tmp_7_fu_302_p2 <= "1" when (unsigned(tmp_6_fu_293_p2) > unsigned(ap_const_lv32_100)) else "0";
    tmp_8_fu_335_p2 <= std_logic_vector(unsigned(j_reg_154) + unsigned(i_cast7_fu_320_p1));
    tmp_9_fu_341_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_reg_726) * signed('0' &ap_const_lv32_1CD))), 32));
    tmp_cast_fu_346_p1 <= std_logic_vector(resize(unsigned(tmp_9_reg_731),33));
    tmp_fu_238_p0 <= spectraIndex;
    tmp_fu_238_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_fu_238_p0) * signed('0' &ap_const_lv32_1CD))), 32));
    tmp_s_fu_359_p2 <= std_logic_vector(unsigned(spectraDataWorkingSetHW_IndexT_1_reg_679) + unsigned(tmp1_cast_fu_355_p1));
end behav;
