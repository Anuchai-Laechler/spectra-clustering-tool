-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AFAProcess_HW_adaptNetwork_HW_integrated is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_baseAddr_AWVALID : OUT STD_LOGIC;
    m_axi_baseAddr_AWREADY : IN STD_LOGIC;
    m_axi_baseAddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_WVALID : OUT STD_LOGIC;
    m_axi_baseAddr_WREADY : IN STD_LOGIC;
    m_axi_baseAddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_WLAST : OUT STD_LOGIC;
    m_axi_baseAddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_ARVALID : OUT STD_LOGIC;
    m_axi_baseAddr_ARREADY : IN STD_LOGIC;
    m_axi_baseAddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_baseAddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_baseAddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_RVALID : IN STD_LOGIC;
    m_axi_baseAddr_RREADY : OUT STD_LOGIC;
    m_axi_baseAddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_baseAddr_RLAST : IN STD_LOGIC;
    m_axi_baseAddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_BVALID : IN STD_LOGIC;
    m_axi_baseAddr_BREADY : OUT STD_LOGIC;
    m_axi_baseAddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_baseAddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_baseAddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    baseAddr1 : IN STD_LOGIC_VECTOR (29 downto 0);
    currentSourceSpectrumIndex : IN STD_LOGIC_VECTOR (63 downto 0);
    spectraDataWorkingSetIndex : IN STD_LOGIC_VECTOR (61 downto 0);
    bestMatchIndex : IN STD_LOGIC_VECTOR (31 downto 0);
    adaptionThreshold : IN STD_LOGIC_VECTOR (31 downto 0);
    sigmaSqr : IN STD_LOGIC_VECTOR (31 downto 0);
    lRate : IN STD_LOGIC_VECTOR (31 downto 0);
    gridSize : IN STD_LOGIC_VECTOR (31 downto 0);
    gridSizeSqr : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of AFAProcess_HW_adaptNetwork_HW_integrated is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st109_fsm_108 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st110_fsm_109 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st111_fsm_110 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st112_fsm_111 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st113_fsm_112 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st114_fsm_113 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st115_fsm_114 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st116_fsm_115 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st117_fsm_116 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st118_fsm_117 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st119_fsm_118 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st120_fsm_119 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st121_fsm_120 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st122_fsm_121 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st123_fsm_122 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st124_fsm_123 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st125_fsm_124 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st126_fsm_125 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st127_fsm_126 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st128_fsm_127 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st129_fsm_128 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st130_fsm_129 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st131_fsm_130 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st132_fsm_131 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st133_fsm_132 : STD_LOGIC_VECTOR (141 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st134_fsm_133 : STD_LOGIC_VECTOR (141 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st135_fsm_134 : STD_LOGIC_VECTOR (141 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st136_fsm_135 : STD_LOGIC_VECTOR (141 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st137_fsm_136 : STD_LOGIC_VECTOR (141 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st138_fsm_137 : STD_LOGIC_VECTOR (141 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st139_fsm_138 : STD_LOGIC_VECTOR (141 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st140_fsm_139 : STD_LOGIC_VECTOR (141 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st141_fsm_140 : STD_LOGIC_VECTOR (141 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st142_fsm_141 : STD_LOGIC_VECTOR (141 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_3EBC5AB2 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101111000101101010110010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001101";
    constant ap_const_lv9_1CA : STD_LOGIC_VECTOR (8 downto 0) := "111001010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_232 : BOOLEAN;
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_239 : BOOLEAN;
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_249 : BOOLEAN;
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_256 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_264 : BOOLEAN;
    signal ap_sig_cseq_ST_st130_fsm_129 : STD_LOGIC;
    signal ap_sig_bdd_272 : BOOLEAN;
    signal ap_sig_cseq_ST_st138_fsm_137 : STD_LOGIC;
    signal ap_sig_bdd_280 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_baseAddr_AWREADY : STD_LOGIC;
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_294 : BOOLEAN;
    signal ap_sig_cseq_ST_st114_fsm_113 : STD_LOGIC;
    signal ap_sig_bdd_301 : BOOLEAN;
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_311 : BOOLEAN;
    signal ap_sig_cseq_ST_st103_fsm_102 : STD_LOGIC;
    signal ap_sig_bdd_318 : BOOLEAN;
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xpBestMatch_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_335 : BOOLEAN;
    signal grp_fu_263_ap_done : STD_LOGIC;
    signal grp_fu_269_ap_done : STD_LOGIC;
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ypBestMatch_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal gridSizeSqr2_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_353 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_366 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_375 : BOOLEAN;
    signal sigmaSqr2_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal fGridSizeSqr_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal adaptionThreshold_to_int_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal adaptionThreshold_to_int_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs8_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs8_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal spectraDataWorkingSetIndex_cas_fu_302_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal spectraDataWorkingSetIndex_cas_reg_615 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_reg_620 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_cast_fu_310_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_cast_reg_625 : STD_LOGIC_VECTOR (62 downto 0);
    signal next_mul_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_404 : BOOLEAN;
    signal y_1_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal y5_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distY1Sqr_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_420 : BOOLEAN;
    signal x_1_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_429 : BOOLEAN;
    signal x6_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st91_fsm_90 : STD_LOGIC;
    signal ap_sig_bdd_445 : BOOLEAN;
    signal tmp_29_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st92_fsm_91 : STD_LOGIC;
    signal ap_sig_bdd_454 : BOOLEAN;
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hxy_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st111_fsm_110 : STD_LOGIC;
    signal ap_sig_bdd_463 : BOOLEAN;
    signal tmp_48_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st115_fsm_114 : STD_LOGIC;
    signal ap_sig_bdd_472 : BOOLEAN;
    signal tmp_33_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal spectraAdress_cast_fu_443_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal spectraAdress_cast_reg_695 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_sig_cseq_ST_st116_fsm_115 : STD_LOGIC;
    signal ap_sig_bdd_486 : BOOLEAN;
    signal i_2_fu_453_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_703 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st117_fsm_116 : STD_LOGIC;
    signal ap_sig_bdd_495 : BOOLEAN;
    signal baseAddr_addr_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal baseAddr_addr_4_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal aTmp_1_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st124_fsm_123 : STD_LOGIC;
    signal ap_sig_bdd_515 : BOOLEAN;
    signal cTmp_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st125_fsm_124 : STD_LOGIC;
    signal ap_sig_bdd_526 : BOOLEAN;
    signal cTmpFloat_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st126_fsm_125 : STD_LOGIC;
    signal ap_sig_bdd_536 : BOOLEAN;
    signal tmp_39_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st133_fsm_132 : STD_LOGIC;
    signal ap_sig_bdd_546 : BOOLEAN;
    signal y_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_190 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st142_fsm_141 : STD_LOGIC;
    signal ap_sig_bdd_567 : BOOLEAN;
    signal sum_cast_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_baseAddr_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_baseAddr_ARREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st118_fsm_117 : STD_LOGIC;
    signal ap_sig_bdd_582 : BOOLEAN;
    signal ap_sig_cseq_ST_st119_fsm_118 : STD_LOGIC;
    signal ap_sig_bdd_600 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_baseAddr_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_baseAddr_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_baseAddr_WREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st139_fsm_138 : STD_LOGIC;
    signal ap_sig_bdd_622 : BOOLEAN;
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_644 : BOOLEAN;
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_651 : BOOLEAN;
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_659 : BOOLEAN;
    signal ap_sig_cseq_ST_st134_fsm_133 : STD_LOGIC;
    signal ap_sig_bdd_666 : BOOLEAN;
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_676 : BOOLEAN;
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_683 : BOOLEAN;
    signal ap_sig_cseq_ST_st112_fsm_111 : STD_LOGIC;
    signal ap_sig_bdd_691 : BOOLEAN;
    signal ap_sig_cseq_ST_st131_fsm_130 : STD_LOGIC;
    signal ap_sig_bdd_698 : BOOLEAN;
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_708 : BOOLEAN;
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_292_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_32_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal notlhs7_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_to_int_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_neg_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lratehsx_to_int_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_399_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_463_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_fu_467_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_cast_fu_472_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_37_fu_476_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum_fu_481_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_35_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_201_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_201_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_850 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_858 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_866 : BOOLEAN;
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_876 : BOOLEAN;
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_884 : BOOLEAN;
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_892 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_902 : BOOLEAN;
    signal ap_sig_cseq_ST_st67_fsm_66 : STD_LOGIC;
    signal ap_sig_bdd_910 : BOOLEAN;
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_918 : BOOLEAN;
    signal ap_sig_cseq_ST_st127_fsm_126 : STD_LOGIC;
    signal ap_sig_bdd_928 : BOOLEAN;
    signal ap_sig_cseq_ST_st128_fsm_127 : STD_LOGIC;
    signal ap_sig_bdd_936 : BOOLEAN;
    signal ap_sig_cseq_ST_st129_fsm_128 : STD_LOGIC;
    signal ap_sig_bdd_944 : BOOLEAN;
    signal ap_sig_cseq_ST_st135_fsm_134 : STD_LOGIC;
    signal ap_sig_bdd_954 : BOOLEAN;
    signal ap_sig_cseq_ST_st136_fsm_135 : STD_LOGIC;
    signal ap_sig_bdd_962 : BOOLEAN;
    signal ap_sig_cseq_ST_st137_fsm_136 : STD_LOGIC;
    signal ap_sig_bdd_970 : BOOLEAN;
    signal grp_fu_205_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_218_ce : STD_LOGIC;
    signal grp_fu_221_ce : STD_LOGIC;
    signal tmp_47_fu_224_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_233_ce : STD_LOGIC;
    signal grp_fu_263_ap_start : STD_LOGIC;
    signal grp_fu_263_ce : STD_LOGIC;
    signal grp_fu_269_ap_start : STD_LOGIC;
    signal grp_fu_269_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (141 downto 0);

    component AFAProcess_HW_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_fmul_32ns_32ns_32_3_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_fdiv_32ns_32ns_32_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_sitofp_64ns_32_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component AFAProcess_HW_fsqrt_32ns_32ns_32_10 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_fexp_32ns_32ns_32_8_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_urem_32ns_32ns_32_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_udiv_32ns_32ns_32_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    AFAProcess_HW_faddfsub_32ns_32ns_32_5_full_dsp_U10 : component AFAProcess_HW_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        opcode => grp_fu_201_opcode,
        ce => grp_fu_201_ce,
        dout => grp_fu_201_p2);

    AFAProcess_HW_fmul_32ns_32ns_32_3_max_dsp_U11 : component AFAProcess_HW_fmul_32ns_32ns_32_3_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p2);

    AFAProcess_HW_fdiv_32ns_32ns_32_12_U12 : component AFAProcess_HW_fdiv_32ns_32ns_32_12
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);

    AFAProcess_HW_sitofp_64ns_32_4_U13 : component AFAProcess_HW_sitofp_64ns_32_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p1);

    AFAProcess_HW_sitofp_64ns_32_4_U14 : component AFAProcess_HW_sitofp_64ns_32_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p1);

    AFAProcess_HW_sitofp_64ns_32_4_U15 : component AFAProcess_HW_sitofp_64ns_32_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p1);

    AFAProcess_HW_fcmp_32ns_32ns_1_1_U16 : component AFAProcess_HW_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_250,
        din1 => adaptionThreshold,
        opcode => tmp_47_fu_224_opcode,
        dout => tmp_47_fu_224_p2);

    AFAProcess_HW_fsqrt_32ns_32ns_32_10_U17 : component AFAProcess_HW_fsqrt_32ns_32ns_32_10
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_257,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    AFAProcess_HW_fexp_32ns_32ns_32_8_full_dsp_U18 : component AFAProcess_HW_fexp_32ns_32ns_32_8_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_257,
        ce => grp_fu_233_ce,
        dout => grp_fu_233_p2);

    AFAProcess_HW_urem_32ns_32ns_32_36_seq_U19 : component AFAProcess_HW_urem_32ns_32ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_263_ap_start,
        done => grp_fu_263_ap_done,
        din0 => bestMatchIndex,
        din1 => gridSize,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p2);

    AFAProcess_HW_udiv_32ns_32ns_32_36_seq_U20 : component AFAProcess_HW_udiv_32ns_32ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_269_ap_start,
        done => grp_fu_269_ap_done,
        din0 => bestMatchIndex,
        din1 => gridSize,
        ce => grp_fu_269_ce,
        dout => grp_fu_269_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_baseAddr_ARREADY assign process. --
    ap_reg_ioackin_m_axi_baseAddr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st118_fsm_117) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st119_fsm_118)))) then 
                    ap_reg_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st118_fsm_117)) or ((ap_const_logic_1 = m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st119_fsm_118)))) then 
                    ap_reg_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_baseAddr_AWREADY assign process. --
    ap_reg_ioackin_m_axi_baseAddr_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_baseAddr_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_137)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_AWREADY))) then 
                        ap_reg_ioackin_m_axi_baseAddr_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_baseAddr_AWREADY)) then 
                        ap_reg_ioackin_m_axi_baseAddr_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_baseAddr_WREADY assign process. --
    ap_reg_ioackin_m_axi_baseAddr_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_baseAddr_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_WREADY))) then 
                        ap_reg_ioackin_m_axi_baseAddr_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_baseAddr_WREADY)) then 
                        ap_reg_ioackin_m_axi_baseAddr_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_190 assign process. --
    i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st142_fsm_141) and not((m_axi_baseAddr_BVALID = ap_const_logic_0)))) then 
                i_reg_190 <= i_2_reg_703;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st116_fsm_115)) then 
                i_reg_190 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_166 assign process. --
    phi_mul_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and not((ap_const_lv1_0 = exitcond1_fu_335_p2)))) then 
                phi_mul_reg_166 <= next_mul_reg_630;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                phi_mul_reg_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- x_reg_178 assign process. --
    x_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st117_fsm_116) and ((ap_const_lv1_0 = tmp_48_reg_686) or not((ap_const_lv1_0 = exitcond_fu_447_p2))))) then 
                x_reg_178 <= x_1_reg_656;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
                x_reg_178 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- y_reg_155 assign process. --
    y_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and not((ap_const_lv1_0 = exitcond1_fu_335_p2)))) then 
                y_reg_155 <= y_1_reg_638;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                y_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st124_fsm_123) and not((m_axi_baseAddr_RVALID = ap_const_logic_0)))) then
                aTmp_1_reg_720 <= m_axi_baseAddr_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then
                adaptionThreshold_to_int_reg_605 <= adaptionThreshold_to_int_fu_288_p1;
                fGridSizeSqr_reg_590 <= grp_fu_215_p1;
                notrhs8_reg_610 <= notrhs8_fu_296_p2;
                    sext_cast_reg_625(29 downto 0) <= sext_cast_fu_310_p1(29 downto 0);
                    sext_reg_620(29 downto 0) <= sext_fu_306_p1(29 downto 0);
                sigmaSqr2_reg_585 <= grp_fu_205_p2;
                    spectraDataWorkingSetIndex_cas_reg_615(61 downto 0) <= spectraDataWorkingSetIndex_cas_fu_302_p1(61 downto 0);
                tmp_reg_595 <= grp_fu_218_p1;
                tmp_s_reg_600 <= grp_fu_221_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st117_fsm_116) and not((ap_const_lv1_0 = tmp_48_reg_686)) and (ap_const_lv1_0 = exitcond_fu_447_p2))) then
                baseAddr_addr_4_reg_714 <= sum3_fu_501_p2(32 - 1 downto 0);
                baseAddr_addr_reg_708 <= sum_cast_fu_486_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_124))) then
                cTmp_reg_725 <= m_axi_baseAddr_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then
                distY1Sqr_reg_648 <= grp_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then
                hxy_reg_681 <= grp_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st117_fsm_116) and not((ap_const_lv1_0 = tmp_48_reg_686)))) then
                i_2_reg_703 <= i_2_fu_453_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then
                next_mul_reg_630 <= next_mul_fu_314_p2;
                y_1_reg_638 <= y_1_fu_324_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55))) then
                reg_238 <= grp_fu_215_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st130_fsm_129) or ((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_137) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_AWREADY))))) then
                reg_243 <= grp_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63) or (ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_113))) then
                reg_250 <= grp_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st103_fsm_102))) then
                reg_257 <= grp_fu_211_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st116_fsm_115)) then
                    spectraAdress_cast_reg_695(31 downto 0) <= spectraAdress_cast_fu_443_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st91_fsm_90)) then
                tmp_28_reg_671 <= grp_fu_228_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114) and not((ap_const_lv1_0 = tmp_48_fu_426_p2)))) then
                tmp_33_reg_690 <= tmp_33_fu_432_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_125)) then
                tmp_39_reg_735 <= tmp_39_fu_516_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_132)) then
                tmp_41_reg_741 <= grp_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and (ap_const_lv1_0 = exitcond1_fu_335_p2))) then
                tmp_45_reg_666 <= tmp_45_fu_366_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114)) then
                tmp_48_reg_686 <= tmp_48_fu_426_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52)) then
                x_1_reg_656 <= x_1_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not(((ap_const_logic_0 = grp_fu_263_ap_done) or (ap_const_logic_0 = grp_fu_269_ap_done))))) then
                xpBestMatch_reg_540 <= grp_fu_263_p2;
                ypBestMatch_reg_545 <= grp_fu_269_p2;
            end if;
        end if;
    end process;
    spectraDataWorkingSetIndex_cas_reg_615(62) <= '0';
    sext_reg_620(63 downto 30) <= "0000000000000000000000000000000000";
    sext_cast_reg_625(62 downto 30) <= "000000000000000000000000000000000";
    spectraAdress_cast_reg_695(32) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, m_axi_baseAddr_RVALID, m_axi_baseAddr_BVALID, ap_sig_ioackin_m_axi_baseAddr_AWREADY, grp_fu_263_ap_done, grp_fu_269_ap_done, exitcond2_fu_319_p2, exitcond1_fu_335_p2, tmp_48_fu_426_p2, tmp_48_reg_686, exitcond_fu_447_p2, ap_sig_ioackin_m_axi_baseAddr_ARREADY, ap_sig_ioackin_m_axi_baseAddr_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                if (not(((ap_const_logic_0 = grp_fu_263_ap_done) or (ap_const_logic_0 = grp_fu_269_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                end if;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                if (not((exitcond2_fu_319_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                end if;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                if ((ap_const_lv1_0 = exitcond1_fu_335_p2)) then
                    ap_NS_fsm <= ap_ST_st54_fsm_53;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                end if;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st100_fsm_99;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                ap_NS_fsm <= ap_ST_st103_fsm_102;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st106_fsm_105;
            when ap_ST_st106_fsm_105 => 
                ap_NS_fsm <= ap_ST_st107_fsm_106;
            when ap_ST_st107_fsm_106 => 
                ap_NS_fsm <= ap_ST_st108_fsm_107;
            when ap_ST_st108_fsm_107 => 
                ap_NS_fsm <= ap_ST_st109_fsm_108;
            when ap_ST_st109_fsm_108 => 
                ap_NS_fsm <= ap_ST_st110_fsm_109;
            when ap_ST_st110_fsm_109 => 
                ap_NS_fsm <= ap_ST_st111_fsm_110;
            when ap_ST_st111_fsm_110 => 
                ap_NS_fsm <= ap_ST_st112_fsm_111;
            when ap_ST_st112_fsm_111 => 
                ap_NS_fsm <= ap_ST_st113_fsm_112;
            when ap_ST_st113_fsm_112 => 
                ap_NS_fsm <= ap_ST_st114_fsm_113;
            when ap_ST_st114_fsm_113 => 
                ap_NS_fsm <= ap_ST_st115_fsm_114;
            when ap_ST_st115_fsm_114 => 
                if ((ap_const_lv1_0 = tmp_48_fu_426_p2)) then
                    ap_NS_fsm <= ap_ST_st117_fsm_116;
                else
                    ap_NS_fsm <= ap_ST_st116_fsm_115;
                end if;
            when ap_ST_st116_fsm_115 => 
                ap_NS_fsm <= ap_ST_st117_fsm_116;
            when ap_ST_st117_fsm_116 => 
                if (((ap_const_lv1_0 = tmp_48_reg_686) or not((ap_const_lv1_0 = exitcond_fu_447_p2)))) then
                    ap_NS_fsm <= ap_ST_st53_fsm_52;
                else
                    ap_NS_fsm <= ap_ST_st118_fsm_117;
                end if;
            when ap_ST_st118_fsm_117 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st119_fsm_118;
                else
                    ap_NS_fsm <= ap_ST_st118_fsm_117;
                end if;
            when ap_ST_st119_fsm_118 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st120_fsm_119;
                else
                    ap_NS_fsm <= ap_ST_st119_fsm_118;
                end if;
            when ap_ST_st120_fsm_119 => 
                ap_NS_fsm <= ap_ST_st121_fsm_120;
            when ap_ST_st121_fsm_120 => 
                ap_NS_fsm <= ap_ST_st122_fsm_121;
            when ap_ST_st122_fsm_121 => 
                ap_NS_fsm <= ap_ST_st123_fsm_122;
            when ap_ST_st123_fsm_122 => 
                ap_NS_fsm <= ap_ST_st124_fsm_123;
            when ap_ST_st124_fsm_123 => 
                if (not((m_axi_baseAddr_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st125_fsm_124;
                else
                    ap_NS_fsm <= ap_ST_st124_fsm_123;
                end if;
            when ap_ST_st125_fsm_124 => 
                if (not((m_axi_baseAddr_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st126_fsm_125;
                else
                    ap_NS_fsm <= ap_ST_st125_fsm_124;
                end if;
            when ap_ST_st126_fsm_125 => 
                ap_NS_fsm <= ap_ST_st127_fsm_126;
            when ap_ST_st127_fsm_126 => 
                ap_NS_fsm <= ap_ST_st128_fsm_127;
            when ap_ST_st128_fsm_127 => 
                ap_NS_fsm <= ap_ST_st129_fsm_128;
            when ap_ST_st129_fsm_128 => 
                ap_NS_fsm <= ap_ST_st130_fsm_129;
            when ap_ST_st130_fsm_129 => 
                ap_NS_fsm <= ap_ST_st131_fsm_130;
            when ap_ST_st131_fsm_130 => 
                ap_NS_fsm <= ap_ST_st132_fsm_131;
            when ap_ST_st132_fsm_131 => 
                ap_NS_fsm <= ap_ST_st133_fsm_132;
            when ap_ST_st133_fsm_132 => 
                ap_NS_fsm <= ap_ST_st134_fsm_133;
            when ap_ST_st134_fsm_133 => 
                ap_NS_fsm <= ap_ST_st135_fsm_134;
            when ap_ST_st135_fsm_134 => 
                ap_NS_fsm <= ap_ST_st136_fsm_135;
            when ap_ST_st136_fsm_135 => 
                ap_NS_fsm <= ap_ST_st137_fsm_136;
            when ap_ST_st137_fsm_136 => 
                ap_NS_fsm <= ap_ST_st138_fsm_137;
            when ap_ST_st138_fsm_137 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st139_fsm_138;
                else
                    ap_NS_fsm <= ap_ST_st138_fsm_137;
                end if;
            when ap_ST_st139_fsm_138 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_WREADY))) then
                    ap_NS_fsm <= ap_ST_st140_fsm_139;
                else
                    ap_NS_fsm <= ap_ST_st139_fsm_138;
                end if;
            when ap_ST_st140_fsm_139 => 
                ap_NS_fsm <= ap_ST_st141_fsm_140;
            when ap_ST_st141_fsm_140 => 
                ap_NS_fsm <= ap_ST_st142_fsm_141;
            when ap_ST_st142_fsm_141 => 
                if (not((m_axi_baseAddr_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st117_fsm_116;
                else
                    ap_NS_fsm <= ap_ST_st142_fsm_141;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    adaptionThreshold_to_int_fu_288_p1 <= adaptionThreshold;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st41_fsm_40, exitcond2_fu_319_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) and not((exitcond2_fu_319_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st41_fsm_40, exitcond2_fu_319_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) and not((exitcond2_fu_319_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_232 assign process. --
    ap_sig_bdd_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_232 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_239 assign process. --
    ap_sig_bdd_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_239 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_249 assign process. --
    ap_sig_bdd_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_249 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_256 assign process. --
    ap_sig_bdd_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_256 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_264 assign process. --
    ap_sig_bdd_264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_264 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_272 assign process. --
    ap_sig_bdd_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_272 <= (ap_const_lv1_1 = ap_CS_fsm(129 downto 129));
    end process;


    -- ap_sig_bdd_280 assign process. --
    ap_sig_bdd_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_280 <= (ap_const_lv1_1 = ap_CS_fsm(137 downto 137));
    end process;


    -- ap_sig_bdd_294 assign process. --
    ap_sig_bdd_294_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_294 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_301 assign process. --
    ap_sig_bdd_301_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_301 <= (ap_const_lv1_1 = ap_CS_fsm(113 downto 113));
    end process;


    -- ap_sig_bdd_311 assign process. --
    ap_sig_bdd_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_311 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_318 assign process. --
    ap_sig_bdd_318_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_318 <= (ap_const_lv1_1 = ap_CS_fsm(102 downto 102));
    end process;


    -- ap_sig_bdd_335 assign process. --
    ap_sig_bdd_335_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_335 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_353 assign process. --
    ap_sig_bdd_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_353 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_366 assign process. --
    ap_sig_bdd_366_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_366 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_375 assign process. --
    ap_sig_bdd_375_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_375 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_404 assign process. --
    ap_sig_bdd_404_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_404 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_420 assign process. --
    ap_sig_bdd_420_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_420 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_429 assign process. --
    ap_sig_bdd_429_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_429 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_445 assign process. --
    ap_sig_bdd_445_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_445 <= (ap_const_lv1_1 = ap_CS_fsm(90 downto 90));
    end process;


    -- ap_sig_bdd_454 assign process. --
    ap_sig_bdd_454_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_454 <= (ap_const_lv1_1 = ap_CS_fsm(91 downto 91));
    end process;


    -- ap_sig_bdd_463 assign process. --
    ap_sig_bdd_463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_463 <= (ap_const_lv1_1 = ap_CS_fsm(110 downto 110));
    end process;


    -- ap_sig_bdd_472 assign process. --
    ap_sig_bdd_472_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_472 <= (ap_const_lv1_1 = ap_CS_fsm(114 downto 114));
    end process;


    -- ap_sig_bdd_486 assign process. --
    ap_sig_bdd_486_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_486 <= (ap_const_lv1_1 = ap_CS_fsm(115 downto 115));
    end process;


    -- ap_sig_bdd_495 assign process. --
    ap_sig_bdd_495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_495 <= (ap_const_lv1_1 = ap_CS_fsm(116 downto 116));
    end process;


    -- ap_sig_bdd_515 assign process. --
    ap_sig_bdd_515_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_515 <= (ap_const_lv1_1 = ap_CS_fsm(123 downto 123));
    end process;


    -- ap_sig_bdd_526 assign process. --
    ap_sig_bdd_526_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_526 <= (ap_const_lv1_1 = ap_CS_fsm(124 downto 124));
    end process;


    -- ap_sig_bdd_536 assign process. --
    ap_sig_bdd_536_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_536 <= (ap_const_lv1_1 = ap_CS_fsm(125 downto 125));
    end process;


    -- ap_sig_bdd_546 assign process. --
    ap_sig_bdd_546_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_546 <= (ap_const_lv1_1 = ap_CS_fsm(132 downto 132));
    end process;


    -- ap_sig_bdd_567 assign process. --
    ap_sig_bdd_567_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_567 <= (ap_const_lv1_1 = ap_CS_fsm(141 downto 141));
    end process;


    -- ap_sig_bdd_582 assign process. --
    ap_sig_bdd_582_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_582 <= (ap_const_lv1_1 = ap_CS_fsm(117 downto 117));
    end process;


    -- ap_sig_bdd_600 assign process. --
    ap_sig_bdd_600_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_600 <= (ap_const_lv1_1 = ap_CS_fsm(118 downto 118));
    end process;


    -- ap_sig_bdd_622 assign process. --
    ap_sig_bdd_622_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_622 <= (ap_const_lv1_1 = ap_CS_fsm(138 downto 138));
    end process;


    -- ap_sig_bdd_644 assign process. --
    ap_sig_bdd_644_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_644 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_651 assign process. --
    ap_sig_bdd_651_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_651 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_659 assign process. --
    ap_sig_bdd_659_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_659 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_666 assign process. --
    ap_sig_bdd_666_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_666 <= (ap_const_lv1_1 = ap_CS_fsm(133 downto 133));
    end process;


    -- ap_sig_bdd_676 assign process. --
    ap_sig_bdd_676_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_676 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_683 assign process. --
    ap_sig_bdd_683_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_683 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_691 assign process. --
    ap_sig_bdd_691_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_691 <= (ap_const_lv1_1 = ap_CS_fsm(111 downto 111));
    end process;


    -- ap_sig_bdd_698 assign process. --
    ap_sig_bdd_698_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_698 <= (ap_const_lv1_1 = ap_CS_fsm(130 downto 130));
    end process;


    -- ap_sig_bdd_708 assign process. --
    ap_sig_bdd_708_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_708 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_850 assign process. --
    ap_sig_bdd_850_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_850 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_858 assign process. --
    ap_sig_bdd_858_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_858 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_866 assign process. --
    ap_sig_bdd_866_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_866 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_876 assign process. --
    ap_sig_bdd_876_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_876 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_884 assign process. --
    ap_sig_bdd_884_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_884 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_892 assign process. --
    ap_sig_bdd_892_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_892 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_902 assign process. --
    ap_sig_bdd_902_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_902 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_910 assign process. --
    ap_sig_bdd_910_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_910 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    -- ap_sig_bdd_918 assign process. --
    ap_sig_bdd_918_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_918 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_928 assign process. --
    ap_sig_bdd_928_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_928 <= (ap_const_lv1_1 = ap_CS_fsm(126 downto 126));
    end process;


    -- ap_sig_bdd_936 assign process. --
    ap_sig_bdd_936_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_936 <= (ap_const_lv1_1 = ap_CS_fsm(127 downto 127));
    end process;


    -- ap_sig_bdd_944 assign process. --
    ap_sig_bdd_944_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_944 <= (ap_const_lv1_1 = ap_CS_fsm(128 downto 128));
    end process;


    -- ap_sig_bdd_954 assign process. --
    ap_sig_bdd_954_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_954 <= (ap_const_lv1_1 = ap_CS_fsm(134 downto 134));
    end process;


    -- ap_sig_bdd_962 assign process. --
    ap_sig_bdd_962_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_962 <= (ap_const_lv1_1 = ap_CS_fsm(135 downto 135));
    end process;


    -- ap_sig_bdd_970 assign process. --
    ap_sig_bdd_970_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_970 <= (ap_const_lv1_1 = ap_CS_fsm(136 downto 136));
    end process;


    -- ap_sig_cseq_ST_st103_fsm_102 assign process. --
    ap_sig_cseq_ST_st103_fsm_102_assign_proc : process(ap_sig_bdd_318)
    begin
        if (ap_sig_bdd_318) then 
            ap_sig_cseq_ST_st103_fsm_102 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st103_fsm_102 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st111_fsm_110 assign process. --
    ap_sig_cseq_ST_st111_fsm_110_assign_proc : process(ap_sig_bdd_463)
    begin
        if (ap_sig_bdd_463) then 
            ap_sig_cseq_ST_st111_fsm_110 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st111_fsm_110 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st112_fsm_111 assign process. --
    ap_sig_cseq_ST_st112_fsm_111_assign_proc : process(ap_sig_bdd_691)
    begin
        if (ap_sig_bdd_691) then 
            ap_sig_cseq_ST_st112_fsm_111 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st112_fsm_111 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st114_fsm_113 assign process. --
    ap_sig_cseq_ST_st114_fsm_113_assign_proc : process(ap_sig_bdd_301)
    begin
        if (ap_sig_bdd_301) then 
            ap_sig_cseq_ST_st114_fsm_113 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st114_fsm_113 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st115_fsm_114 assign process. --
    ap_sig_cseq_ST_st115_fsm_114_assign_proc : process(ap_sig_bdd_472)
    begin
        if (ap_sig_bdd_472) then 
            ap_sig_cseq_ST_st115_fsm_114 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st115_fsm_114 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st116_fsm_115 assign process. --
    ap_sig_cseq_ST_st116_fsm_115_assign_proc : process(ap_sig_bdd_486)
    begin
        if (ap_sig_bdd_486) then 
            ap_sig_cseq_ST_st116_fsm_115 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st116_fsm_115 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st117_fsm_116 assign process. --
    ap_sig_cseq_ST_st117_fsm_116_assign_proc : process(ap_sig_bdd_495)
    begin
        if (ap_sig_bdd_495) then 
            ap_sig_cseq_ST_st117_fsm_116 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st117_fsm_116 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st118_fsm_117 assign process. --
    ap_sig_cseq_ST_st118_fsm_117_assign_proc : process(ap_sig_bdd_582)
    begin
        if (ap_sig_bdd_582) then 
            ap_sig_cseq_ST_st118_fsm_117 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st118_fsm_117 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st119_fsm_118 assign process. --
    ap_sig_cseq_ST_st119_fsm_118_assign_proc : process(ap_sig_bdd_600)
    begin
        if (ap_sig_bdd_600) then 
            ap_sig_cseq_ST_st119_fsm_118 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st119_fsm_118 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st124_fsm_123 assign process. --
    ap_sig_cseq_ST_st124_fsm_123_assign_proc : process(ap_sig_bdd_515)
    begin
        if (ap_sig_bdd_515) then 
            ap_sig_cseq_ST_st124_fsm_123 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st124_fsm_123 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st125_fsm_124 assign process. --
    ap_sig_cseq_ST_st125_fsm_124_assign_proc : process(ap_sig_bdd_526)
    begin
        if (ap_sig_bdd_526) then 
            ap_sig_cseq_ST_st125_fsm_124 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st125_fsm_124 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st126_fsm_125 assign process. --
    ap_sig_cseq_ST_st126_fsm_125_assign_proc : process(ap_sig_bdd_536)
    begin
        if (ap_sig_bdd_536) then 
            ap_sig_cseq_ST_st126_fsm_125 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st126_fsm_125 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st127_fsm_126 assign process. --
    ap_sig_cseq_ST_st127_fsm_126_assign_proc : process(ap_sig_bdd_928)
    begin
        if (ap_sig_bdd_928) then 
            ap_sig_cseq_ST_st127_fsm_126 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st127_fsm_126 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st128_fsm_127 assign process. --
    ap_sig_cseq_ST_st128_fsm_127_assign_proc : process(ap_sig_bdd_936)
    begin
        if (ap_sig_bdd_936) then 
            ap_sig_cseq_ST_st128_fsm_127 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st128_fsm_127 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st129_fsm_128 assign process. --
    ap_sig_cseq_ST_st129_fsm_128_assign_proc : process(ap_sig_bdd_944)
    begin
        if (ap_sig_bdd_944) then 
            ap_sig_cseq_ST_st129_fsm_128 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st129_fsm_128 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st130_fsm_129 assign process. --
    ap_sig_cseq_ST_st130_fsm_129_assign_proc : process(ap_sig_bdd_272)
    begin
        if (ap_sig_bdd_272) then 
            ap_sig_cseq_ST_st130_fsm_129 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st130_fsm_129 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st131_fsm_130 assign process. --
    ap_sig_cseq_ST_st131_fsm_130_assign_proc : process(ap_sig_bdd_698)
    begin
        if (ap_sig_bdd_698) then 
            ap_sig_cseq_ST_st131_fsm_130 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st131_fsm_130 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st133_fsm_132 assign process. --
    ap_sig_cseq_ST_st133_fsm_132_assign_proc : process(ap_sig_bdd_546)
    begin
        if (ap_sig_bdd_546) then 
            ap_sig_cseq_ST_st133_fsm_132 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st133_fsm_132 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st134_fsm_133 assign process. --
    ap_sig_cseq_ST_st134_fsm_133_assign_proc : process(ap_sig_bdd_666)
    begin
        if (ap_sig_bdd_666) then 
            ap_sig_cseq_ST_st134_fsm_133 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st134_fsm_133 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st135_fsm_134 assign process. --
    ap_sig_cseq_ST_st135_fsm_134_assign_proc : process(ap_sig_bdd_954)
    begin
        if (ap_sig_bdd_954) then 
            ap_sig_cseq_ST_st135_fsm_134 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st135_fsm_134 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st136_fsm_135 assign process. --
    ap_sig_cseq_ST_st136_fsm_135_assign_proc : process(ap_sig_bdd_962)
    begin
        if (ap_sig_bdd_962) then 
            ap_sig_cseq_ST_st136_fsm_135 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st136_fsm_135 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st137_fsm_136 assign process. --
    ap_sig_cseq_ST_st137_fsm_136_assign_proc : process(ap_sig_bdd_970)
    begin
        if (ap_sig_bdd_970) then 
            ap_sig_cseq_ST_st137_fsm_136 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st137_fsm_136 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st138_fsm_137 assign process. --
    ap_sig_cseq_ST_st138_fsm_137_assign_proc : process(ap_sig_bdd_280)
    begin
        if (ap_sig_bdd_280) then 
            ap_sig_cseq_ST_st138_fsm_137 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st138_fsm_137 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st139_fsm_138 assign process. --
    ap_sig_cseq_ST_st139_fsm_138_assign_proc : process(ap_sig_bdd_622)
    begin
        if (ap_sig_bdd_622) then 
            ap_sig_cseq_ST_st139_fsm_138 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st139_fsm_138 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st142_fsm_141 assign process. --
    ap_sig_cseq_ST_st142_fsm_141_assign_proc : process(ap_sig_bdd_567)
    begin
        if (ap_sig_bdd_567) then 
            ap_sig_cseq_ST_st142_fsm_141 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st142_fsm_141 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_335)
    begin
        if (ap_sig_bdd_335) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_353)
    begin
        if (ap_sig_bdd_353) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_366)
    begin
        if (ap_sig_bdd_366) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_375)
    begin
        if (ap_sig_bdd_375) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_404)
    begin
        if (ap_sig_bdd_404) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_232)
    begin
        if (ap_sig_bdd_232) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_644)
    begin
        if (ap_sig_bdd_644) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_850)
    begin
        if (ap_sig_bdd_850) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_858)
    begin
        if (ap_sig_bdd_858) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_866)
    begin
        if (ap_sig_bdd_866) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_249)
    begin
        if (ap_sig_bdd_249) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_676)
    begin
        if (ap_sig_bdd_676) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_420)
    begin
        if (ap_sig_bdd_420) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st53_fsm_52 assign process. --
    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_bdd_429)
    begin
        if (ap_sig_bdd_429) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_55 assign process. --
    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_bdd_239)
    begin
        if (ap_sig_bdd_239) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_56 assign process. --
    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_bdd_651)
    begin
        if (ap_sig_bdd_651) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st58_fsm_57 assign process. --
    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_bdd_876)
    begin
        if (ap_sig_bdd_876) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st59_fsm_58 assign process. --
    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_bdd_884)
    begin
        if (ap_sig_bdd_884) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st60_fsm_59 assign process. --
    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_bdd_892)
    begin
        if (ap_sig_bdd_892) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_256)
    begin
        if (ap_sig_bdd_256) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st62_fsm_61 assign process. --
    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_bdd_683)
    begin
        if (ap_sig_bdd_683) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_294)
    begin
        if (ap_sig_bdd_294) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_64 assign process. --
    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_bdd_659)
    begin
        if (ap_sig_bdd_659) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st66_fsm_65 assign process. --
    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_bdd_902)
    begin
        if (ap_sig_bdd_902) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st67_fsm_66 assign process. --
    ap_sig_cseq_ST_st67_fsm_66_assign_proc : process(ap_sig_bdd_910)
    begin
        if (ap_sig_bdd_910) then 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st68_fsm_67 assign process. --
    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_bdd_918)
    begin
        if (ap_sig_bdd_918) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_264)
    begin
        if (ap_sig_bdd_264) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_708)
    begin
        if (ap_sig_bdd_708) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st81_fsm_80 assign process. --
    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_bdd_311)
    begin
        if (ap_sig_bdd_311) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st91_fsm_90 assign process. --
    ap_sig_cseq_ST_st91_fsm_90_assign_proc : process(ap_sig_bdd_445)
    begin
        if (ap_sig_bdd_445) then 
            ap_sig_cseq_ST_st91_fsm_90 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st91_fsm_90 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st92_fsm_91 assign process. --
    ap_sig_cseq_ST_st92_fsm_91_assign_proc : process(ap_sig_bdd_454)
    begin
        if (ap_sig_bdd_454) then 
            ap_sig_cseq_ST_st92_fsm_91 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st92_fsm_91 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_baseAddr_ARREADY assign process. --
    ap_sig_ioackin_m_axi_baseAddr_ARREADY_assign_proc : process(m_axi_baseAddr_ARREADY, ap_reg_ioackin_m_axi_baseAddr_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY)) then 
            ap_sig_ioackin_m_axi_baseAddr_ARREADY <= m_axi_baseAddr_ARREADY;
        else 
            ap_sig_ioackin_m_axi_baseAddr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_baseAddr_AWREADY assign process. --
    ap_sig_ioackin_m_axi_baseAddr_AWREADY_assign_proc : process(m_axi_baseAddr_AWREADY, ap_reg_ioackin_m_axi_baseAddr_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_AWREADY)) then 
            ap_sig_ioackin_m_axi_baseAddr_AWREADY <= m_axi_baseAddr_AWREADY;
        else 
            ap_sig_ioackin_m_axi_baseAddr_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_baseAddr_WREADY assign process. --
    ap_sig_ioackin_m_axi_baseAddr_WREADY_assign_proc : process(m_axi_baseAddr_WREADY, ap_reg_ioackin_m_axi_baseAddr_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_WREADY)) then 
            ap_sig_ioackin_m_axi_baseAddr_WREADY <= m_axi_baseAddr_WREADY;
        else 
            ap_sig_ioackin_m_axi_baseAddr_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    cTmpFloat_fu_512_p1 <= cTmp_reg_725;
    exitcond1_fu_335_p2 <= "1" when (x_reg_178 = gridSize) else "0";
    exitcond2_fu_319_p2 <= "1" when (y_reg_155 = gridSize) else "0";
    exitcond_fu_447_p2 <= "1" when (i_reg_190 = ap_const_lv9_1CA) else "0";
    gridSizeSqr2_fu_275_p1 <= std_logic_vector(resize(unsigned(gridSizeSqr),64));

    -- grp_fu_201_ce assign process. --
    grp_fu_201_ce_assign_proc : process(ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st61_fsm_60, ap_sig_cseq_ST_st69_fsm_68, ap_sig_cseq_ST_st130_fsm_129, ap_sig_cseq_ST_st138_fsm_137, ap_sig_ioackin_m_axi_baseAddr_AWREADY, ap_sig_cseq_ST_st126_fsm_125, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st134_fsm_133, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st58_fsm_57, ap_sig_cseq_ST_st59_fsm_58, ap_sig_cseq_ST_st60_fsm_59, ap_sig_cseq_ST_st66_fsm_65, ap_sig_cseq_ST_st67_fsm_66, ap_sig_cseq_ST_st68_fsm_67, ap_sig_cseq_ST_st127_fsm_126, ap_sig_cseq_ST_st128_fsm_127, ap_sig_cseq_ST_st129_fsm_128, ap_sig_cseq_ST_st135_fsm_134, ap_sig_cseq_ST_st136_fsm_135, ap_sig_cseq_ST_st137_fsm_136)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st130_fsm_129) or ((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_137) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_baseAddr_AWREADY))) or (ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_125) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_133) or (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58) or (ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59) or (ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65) or (ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66) or (ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67) or (ap_const_logic_1 = ap_sig_cseq_ST_st127_fsm_126) or (ap_const_logic_1 = ap_sig_cseq_ST_st128_fsm_127) or (ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_128) or (ap_const_logic_1 = ap_sig_cseq_ST_st135_fsm_134) or (ap_const_logic_1 = ap_sig_cseq_ST_st136_fsm_135) or (ap_const_logic_1 = ap_sig_cseq_ST_st137_fsm_136))) then 
            grp_fu_201_ce <= ap_const_logic_1;
        else 
            grp_fu_201_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_201_opcode assign process. --
    grp_fu_201_opcode_assign_proc : process(ap_sig_cseq_ST_st126_fsm_125, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st134_fsm_133)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_125) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56))) then 
            grp_fu_201_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_133))) then 
            grp_fu_201_opcode <= ap_const_lv2_0;
        else 
            grp_fu_201_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_201_p0 assign process. --
    grp_fu_201_p0_assign_proc : process(reg_238, reg_250, cTmpFloat_fu_512_p1, ap_sig_cseq_ST_st126_fsm_125, tmp_39_reg_735, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st134_fsm_133)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_133)) then 
            grp_fu_201_p0 <= tmp_39_reg_735;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_125)) then 
            grp_fu_201_p0 <= cTmpFloat_fu_512_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
            grp_fu_201_p0 <= reg_250;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56))) then 
            grp_fu_201_p0 <= reg_238;
        else 
            grp_fu_201_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_201_p1 assign process. --
    grp_fu_201_p1_assign_proc : process(tmp_reg_595, tmp_s_reg_600, distY1Sqr_reg_648, ap_sig_cseq_ST_st126_fsm_125, tmp_39_fu_516_p1, tmp_41_reg_741, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st134_fsm_133)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_133)) then 
            grp_fu_201_p1 <= tmp_41_reg_741;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_125)) then 
            grp_fu_201_p1 <= tmp_39_fu_516_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
            grp_fu_201_p1 <= distY1Sqr_reg_648;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
            grp_fu_201_p1 <= tmp_s_reg_600;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
            grp_fu_201_p1 <= tmp_reg_595;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_205_ce <= ap_const_logic_1;

    -- grp_fu_205_p0 assign process. --
    grp_fu_205_p0_assign_proc : process(sigmaSqr, reg_243, reg_250, ap_sig_cseq_ST_st38_fsm_37, hxy_reg_681, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st112_fsm_111, ap_sig_cseq_ST_st131_fsm_130)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st131_fsm_130)) then 
            grp_fu_205_p0 <= reg_250;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st112_fsm_111)) then 
            grp_fu_205_p0 <= hxy_reg_681;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61))) then 
            grp_fu_205_p0 <= reg_243;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_205_p0 <= sigmaSqr;
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_205_p1 assign process. --
    grp_fu_205_p1_assign_proc : process(lRate, reg_243, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st112_fsm_111, ap_sig_cseq_ST_st131_fsm_130)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st112_fsm_111)) then 
            grp_fu_205_p1 <= lRate;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st131_fsm_130))) then 
            grp_fu_205_p1 <= reg_243;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_205_p1 <= ap_const_lv32_3EBC5AB2;
        else 
            grp_fu_205_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_211_ce <= ap_const_logic_1;

    -- grp_fu_211_p0 assign process. --
    grp_fu_211_p0_assign_proc : process(reg_243, tmp_29_fu_380_p1, ap_sig_cseq_ST_st92_fsm_91, ap_sig_cseq_ST_st70_fsm_69)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st92_fsm_91)) then 
            grp_fu_211_p0 <= tmp_29_fu_380_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            grp_fu_211_p0 <= reg_243;
        else 
            grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_211_p1 assign process. --
    grp_fu_211_p1_assign_proc : process(sigmaSqr2_reg_585, fGridSizeSqr_reg_590, ap_sig_cseq_ST_st92_fsm_91, ap_sig_cseq_ST_st70_fsm_69)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st92_fsm_91)) then 
            grp_fu_211_p1 <= sigmaSqr2_reg_585;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            grp_fu_211_p1 <= fGridSizeSqr_reg_590;
        else 
            grp_fu_211_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_215_ce <= ap_const_logic_1;

    -- grp_fu_215_p0 assign process. --
    grp_fu_215_p0_assign_proc : process(gridSizeSqr2_fu_275_p1, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st41_fsm_40, y5_fu_330_p1, ap_sig_cseq_ST_st53_fsm_52, x6_fu_346_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52)) then 
            grp_fu_215_p0 <= x6_fu_346_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            grp_fu_215_p0 <= y5_fu_330_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_215_p0 <= gridSizeSqr2_fu_275_p1;
        else 
            grp_fu_215_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_218_ce <= ap_const_logic_1;
    grp_fu_218_p0 <= std_logic_vector(resize(unsigned(ypBestMatch_reg_545),64));
    grp_fu_221_ce <= ap_const_logic_1;
    grp_fu_221_p0 <= std_logic_vector(resize(unsigned(xpBestMatch_reg_540),64));
    grp_fu_228_ce <= ap_const_logic_1;
    grp_fu_233_ce <= ap_const_logic_1;

    -- grp_fu_263_ap_start assign process. --
    grp_fu_263_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_263_ap_start <= ap_const_logic_1;
        else 
            grp_fu_263_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_ce <= ap_const_logic_1;

    -- grp_fu_269_ap_start assign process. --
    grp_fu_269_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_269_ap_start <= ap_const_logic_1;
        else 
            grp_fu_269_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_269_ce <= ap_const_logic_1;
    i_2_fu_453_p2 <= std_logic_vector(unsigned(i_reg_190) + unsigned(ap_const_lv9_1));
    lratehsx_to_int_fu_385_p1 <= reg_250;

    -- m_axi_baseAddr_ARADDR assign process. --
    m_axi_baseAddr_ARADDR_assign_proc : process(baseAddr_addr_reg_708, baseAddr_addr_4_reg_714, ap_reg_ioackin_m_axi_baseAddr_ARREADY, ap_sig_cseq_ST_st118_fsm_117, ap_sig_cseq_ST_st119_fsm_118)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st119_fsm_118)) then 
                m_axi_baseAddr_ARADDR <= baseAddr_addr_4_reg_714;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st118_fsm_117)) then 
                m_axi_baseAddr_ARADDR <= baseAddr_addr_reg_708;
            else 
                m_axi_baseAddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_baseAddr_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_baseAddr_ARBURST <= ap_const_lv2_0;
    m_axi_baseAddr_ARCACHE <= ap_const_lv4_0;
    m_axi_baseAddr_ARID <= ap_const_lv1_0;
    m_axi_baseAddr_ARLEN <= ap_const_lv32_1;
    m_axi_baseAddr_ARLOCK <= ap_const_lv2_0;
    m_axi_baseAddr_ARPROT <= ap_const_lv3_0;
    m_axi_baseAddr_ARQOS <= ap_const_lv4_0;
    m_axi_baseAddr_ARREGION <= ap_const_lv4_0;
    m_axi_baseAddr_ARSIZE <= ap_const_lv3_0;
    m_axi_baseAddr_ARUSER <= ap_const_lv1_0;

    -- m_axi_baseAddr_ARVALID assign process. --
    m_axi_baseAddr_ARVALID_assign_proc : process(ap_reg_ioackin_m_axi_baseAddr_ARREADY, ap_sig_cseq_ST_st118_fsm_117, ap_sig_cseq_ST_st119_fsm_118)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st118_fsm_117) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st119_fsm_118)))) then 
            m_axi_baseAddr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_baseAddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_baseAddr_AWADDR <= baseAddr_addr_reg_708;
    m_axi_baseAddr_AWBURST <= ap_const_lv2_0;
    m_axi_baseAddr_AWCACHE <= ap_const_lv4_0;
    m_axi_baseAddr_AWID <= ap_const_lv1_0;
    m_axi_baseAddr_AWLEN <= ap_const_lv32_1;
    m_axi_baseAddr_AWLOCK <= ap_const_lv2_0;
    m_axi_baseAddr_AWPROT <= ap_const_lv3_0;
    m_axi_baseAddr_AWQOS <= ap_const_lv4_0;
    m_axi_baseAddr_AWREGION <= ap_const_lv4_0;
    m_axi_baseAddr_AWSIZE <= ap_const_lv3_0;
    m_axi_baseAddr_AWUSER <= ap_const_lv1_0;

    -- m_axi_baseAddr_AWVALID assign process. --
    m_axi_baseAddr_AWVALID_assign_proc : process(ap_sig_cseq_ST_st138_fsm_137, ap_reg_ioackin_m_axi_baseAddr_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_137) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_AWREADY))) then 
            m_axi_baseAddr_AWVALID <= ap_const_logic_1;
        else 
            m_axi_baseAddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_baseAddr_BREADY assign process. --
    m_axi_baseAddr_BREADY_assign_proc : process(m_axi_baseAddr_BVALID, ap_sig_cseq_ST_st142_fsm_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st142_fsm_141) and not((m_axi_baseAddr_BVALID = ap_const_logic_0)))) then 
            m_axi_baseAddr_BREADY <= ap_const_logic_1;
        else 
            m_axi_baseAddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_baseAddr_RREADY assign process. --
    m_axi_baseAddr_RREADY_assign_proc : process(m_axi_baseAddr_RVALID, ap_sig_cseq_ST_st124_fsm_123, ap_sig_cseq_ST_st125_fsm_124)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st124_fsm_123) and not((m_axi_baseAddr_RVALID = ap_const_logic_0))) or (not((m_axi_baseAddr_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_124)))) then 
            m_axi_baseAddr_RREADY <= ap_const_logic_1;
        else 
            m_axi_baseAddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_baseAddr_WDATA <= reg_243;
    m_axi_baseAddr_WID <= ap_const_lv1_0;
    m_axi_baseAddr_WLAST <= ap_const_logic_0;
    m_axi_baseAddr_WSTRB <= ap_const_lv4_F;
    m_axi_baseAddr_WUSER <= ap_const_lv1_0;

    -- m_axi_baseAddr_WVALID assign process. --
    m_axi_baseAddr_WVALID_assign_proc : process(ap_reg_ioackin_m_axi_baseAddr_WREADY, ap_sig_cseq_ST_st139_fsm_138)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_baseAddr_WREADY))) then 
            m_axi_baseAddr_WVALID <= ap_const_logic_1;
        else 
            m_axi_baseAddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_314_p2 <= std_logic_vector(unsigned(phi_mul_reg_166) + unsigned(gridSize));
    notlhs7_fu_360_p2 <= "0" when (tmp_32_fu_351_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_403_p2 <= "0" when (tmp_31_fu_389_p4 = ap_const_lv8_FF) else "1";
    notrhs8_fu_296_p2 <= "1" when (tmp_36_fu_292_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_409_p2 <= "1" when (tmp_44_fu_399_p1 = ap_const_lv23_0) else "0";
    sext_cast_fu_310_p1 <= std_logic_vector(resize(unsigned(baseAddr1),63));
    sext_fu_306_p1 <= std_logic_vector(resize(unsigned(baseAddr1),64));
    spectraAdress_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_438_p2),33));
    spectraDataWorkingSetIndex_cas_fu_302_p1 <= std_logic_vector(resize(unsigned(spectraDataWorkingSetIndex),63));
    sum3_fu_501_p2 <= std_logic_vector(unsigned(sext_reg_620) + unsigned(tmp_38_fu_496_p2));
    sum_cast_fu_486_p1 <= std_logic_vector(resize(unsigned(sum_fu_481_p2),64));
    sum_fu_481_p2 <= std_logic_vector(unsigned(sext_cast_reg_625) + unsigned(tmp_37_fu_476_p2));
    tmp1_cast_fu_472_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_467_p2),63));
    tmp1_fu_467_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_463_p1) + unsigned(spectraAdress_cast_reg_695));
    tmp_29_fu_380_p1 <= tmp_30_neg_fu_374_p2;
    tmp_30_neg_fu_374_p2 <= (tmp_30_to_int_fu_371_p1 xor ap_const_lv32_80000000);
    tmp_30_to_int_fu_371_p1 <= tmp_28_reg_671;
    tmp_31_fu_389_p4 <= lratehsx_to_int_fu_385_p1(30 downto 23);
    tmp_32_fu_351_p4 <= adaptionThreshold_to_int_reg_605(30 downto 23);
    tmp_33_fu_432_p2 <= std_logic_vector(unsigned(x_reg_178) + unsigned(phi_mul_reg_166));
    tmp_34_fu_438_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_33_reg_690) * signed('0' &ap_const_lv32_1CD))), 32));
    tmp_35_cast_fu_463_p1 <= std_logic_vector(resize(unsigned(i_reg_190),33));
    tmp_35_fu_459_p1 <= std_logic_vector(resize(unsigned(i_reg_190),64));
    tmp_36_fu_292_p1 <= adaptionThreshold_to_int_fu_288_p1(23 - 1 downto 0);
    tmp_37_fu_476_p2 <= std_logic_vector(unsigned(spectraDataWorkingSetIndex_cas_reg_615) + unsigned(tmp1_cast_fu_472_p1));
    tmp_38_fu_496_p2 <= std_logic_vector(unsigned(currentSourceSpectrumIndex) + unsigned(tmp_35_fu_459_p1));
    tmp_39_fu_516_p1 <= aTmp_1_reg_720;
    tmp_43_fu_415_p2 <= (notrhs_fu_409_p2 or notlhs_fu_403_p2);
    tmp_44_fu_399_p1 <= lratehsx_to_int_fu_385_p1(23 - 1 downto 0);
    tmp_45_fu_366_p2 <= (notrhs8_reg_610 or notlhs7_fu_360_p2);
    tmp_46_fu_421_p2 <= (tmp_43_fu_415_p2 and tmp_45_reg_666);
    tmp_47_fu_224_opcode <= ap_const_lv5_2;
    tmp_48_fu_426_p2 <= (tmp_46_fu_421_p2 and tmp_47_fu_224_p2);
    x6_fu_346_p1 <= std_logic_vector(resize(unsigned(x_reg_178),64));
    x_1_fu_340_p2 <= std_logic_vector(unsigned(x_reg_178) + unsigned(ap_const_lv32_1));
    y5_fu_330_p1 <= std_logic_vector(resize(unsigned(y_reg_155),64));
    y_1_fu_324_p2 <= std_logic_vector(unsigned(y_reg_155) + unsigned(ap_const_lv32_1));
end behav;
