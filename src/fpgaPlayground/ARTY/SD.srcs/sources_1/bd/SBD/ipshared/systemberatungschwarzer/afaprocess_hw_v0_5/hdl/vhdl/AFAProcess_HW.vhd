-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AFAProcess_HW is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_INTERFACE_AXILITE_SLAVE_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_INTERFACE_AXILITE_SLAVE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    param_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    param_EN_A : OUT STD_LOGIC;
    param_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    param_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    param_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    param_Clk_A : OUT STD_LOGIC;
    param_Rst_A : OUT STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_AWVALID : IN STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_AWREADY : OUT STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INTERFACE_AXILITE_SLAVE_ADDR_WIDTH-1 downto 0);
    s_axi_INTERFACE_AXILITE_SLAVE_WVALID : IN STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_WREADY : OUT STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INTERFACE_AXILITE_SLAVE_DATA_WIDTH-1 downto 0);
    s_axi_INTERFACE_AXILITE_SLAVE_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INTERFACE_AXILITE_SLAVE_DATA_WIDTH/8-1 downto 0);
    s_axi_INTERFACE_AXILITE_SLAVE_ARVALID : IN STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_ARREADY : OUT STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INTERFACE_AXILITE_SLAVE_ADDR_WIDTH-1 downto 0);
    s_axi_INTERFACE_AXILITE_SLAVE_RVALID : OUT STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_RREADY : IN STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INTERFACE_AXILITE_SLAVE_DATA_WIDTH-1 downto 0);
    s_axi_INTERFACE_AXILITE_SLAVE_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INTERFACE_AXILITE_SLAVE_BVALID : OUT STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_BREADY : IN STD_LOGIC;
    s_axi_INTERFACE_AXILITE_SLAVE_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AFAProcess_HW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AFAProcess_HW,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35ticsg324-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=27,HLS_SYN_FF=7274,HLS_SYN_LUT=9089}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_1CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001101";
    constant ap_const_lv33_1CB : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111001011";
    constant ap_const_lv64_1CB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111001011";
    constant ap_const_lv33_1CC : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111001100";
    constant ap_const_lv64_1CC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111001100";
    constant ap_const_lv64_1CA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111001010";
    constant ap_const_lv33_1CA : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111001010";
    constant ap_const_lv32_D00FE5E1 : STD_LOGIC_VECTOR (31 downto 0) := "11010000000011111110010111100001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal baseAddr : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal AFAProcess_HW_INTERFACE_AXILITE_SLAVE_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AFAProcess_HW_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_260 : BOOLEAN;
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_270 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_286 : BOOLEAN;
    signal tmp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal adaptionThreshold_temp_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_296 : BOOLEAN;
    signal sigmaSqr_temp_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_306 : BOOLEAN;
    signal lRate_temp_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_316 : BOOLEAN;
    signal m_gridSize_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_326 : BOOLEAN;
    signal m_gridSizeSqr_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_336 : BOOLEAN;
    signal m_numSpectra_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_346 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_357 : BOOLEAN;
    signal tmp_3_reg_663 : STD_LOGIC_VECTOR (29 downto 0);
    signal param_load_1_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_367 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_378 : BOOLEAN;
    signal tmp_5_reg_683 : STD_LOGIC_VECTOR (29 downto 0);
    signal param_load_3_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_398 : BOOLEAN;
    signal tmp_7_reg_703 : STD_LOGIC_VECTOR (29 downto 0);
    signal baseAddr1_fu_333_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal baseAddr1_reg_708 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_408 : BOOLEAN;
    signal tmp_2_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_714 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_cast_fu_347_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_cast_reg_724 : STD_LOGIC_VECTOR (62 downto 0);
    signal adaptionThreshold_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal adaptionThreshold_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigmaSqr_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigmaSqr_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal lRate_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lRate_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal spectraDataInputHWIndexToMem_1_fu_360_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal spectraDataInputHWIndexToMem_1_reg_744 : STD_LOGIC_VECTOR (61 downto 0);
    signal spectraDataInputHWIndexToMem_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal spectraDataInputHWIndexToMem_reg_749 : STD_LOGIC_VECTOR (63 downto 0);
    signal spectraDataWorkingSetHWIndexTo_fu_370_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal spectraDataWorkingSetHWIndexTo_reg_757 : STD_LOGIC_VECTOR (61 downto 0);
    signal spectraDataWorkingSetHWIndexTo_1_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal spectraDataWorkingSetHWIndexTo_1_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal spectraIndexListIndexToMem_1_c_fu_387_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal spectraIndexListIndexToMem_1_c_reg_768 : STD_LOGIC_VECTOR (62 downto 0);
    signal param_addr_13_gep_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal param_addr_13_reg_773 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_439 : BOOLEAN;
    signal gmem_addr_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal spectraIndex_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_453 : BOOLEAN;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_463 : BOOLEAN;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_done : STD_LOGIC;
    signal tmp_45_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_481 : BOOLEAN;
    signal tmp_47_cast_fu_437_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_47_cast_reg_815 : STD_LOGIC_VECTOR (32 downto 0);
    signal gmem_addr_1_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_494 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal gmem_addr_3_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_4_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_5_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_6_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_reg_853 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_done : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_idle : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_ready : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WLAST : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RLAST : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_baseAddr1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_currentSourceSpectrumIndex : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_spectraDataWorkingSetIndex : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_bestMatchIndex : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_adaptionThreshold : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_sigmaSqr : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_lRate : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_gridSize : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_gridSizeSqr : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_idle : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_ready : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WLAST : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RLAST : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BVALID : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BREADY : STD_LOGIC;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_baseAddr1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraDataInputHW_IndexToMem : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraDataWorkingSetHW_IndexT : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_gridSizeSqr : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraIndex : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_632 : BOOLEAN;
    signal bmu_index1_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_648 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_656 : BOOLEAN;
    signal grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_666 : BOOLEAN;
    signal baseAddr2_sum_cast_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal baseAddr2_sum3_fu_455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal baseAddr2_sum4_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal baseAddr2_sum5_fu_508_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal baseAddr2_sum6_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal baseAddr2_sum7_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal baseAddr2_sum8_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_698 : BOOLEAN;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_721 : BOOLEAN;
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_738 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_753 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_761 : BOOLEAN;
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_774 : BOOLEAN;
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_787 : BOOLEAN;
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_800 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_811 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_824 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_844 : BOOLEAN;
    signal param_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal spectraIndexListIndexToMem_1_fu_380_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_cast_fu_402_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_406_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal baseAddr2_sum_fu_411_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp1_fu_440_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_cast_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_450_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bmuSpectrumIndex_fu_469_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_494_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp2_cast_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_503_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_553_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp3_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);

    component AFAProcess_HW_adaptNetwork_HW_integrated IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_baseAddr_AWVALID : OUT STD_LOGIC;
        m_axi_baseAddr_AWREADY : IN STD_LOGIC;
        m_axi_baseAddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_WVALID : OUT STD_LOGIC;
        m_axi_baseAddr_WREADY : IN STD_LOGIC;
        m_axi_baseAddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_WLAST : OUT STD_LOGIC;
        m_axi_baseAddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_ARVALID : OUT STD_LOGIC;
        m_axi_baseAddr_ARREADY : IN STD_LOGIC;
        m_axi_baseAddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_RVALID : IN STD_LOGIC;
        m_axi_baseAddr_RREADY : OUT STD_LOGIC;
        m_axi_baseAddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_RLAST : IN STD_LOGIC;
        m_axi_baseAddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_BVALID : IN STD_LOGIC;
        m_axi_baseAddr_BREADY : OUT STD_LOGIC;
        m_axi_baseAddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        baseAddr1 : IN STD_LOGIC_VECTOR (29 downto 0);
        currentSourceSpectrumIndex : IN STD_LOGIC_VECTOR (63 downto 0);
        spectraDataWorkingSetIndex : IN STD_LOGIC_VECTOR (61 downto 0);
        bestMatchIndex : IN STD_LOGIC_VECTOR (31 downto 0);
        adaptionThreshold : IN STD_LOGIC_VECTOR (31 downto 0);
        sigmaSqr : IN STD_LOGIC_VECTOR (31 downto 0);
        lRate : IN STD_LOGIC_VECTOR (31 downto 0);
        gridSize : IN STD_LOGIC_VECTOR (31 downto 0);
        gridSizeSqr : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_searchBestMatchComplete_HW IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_baseAddr_AWVALID : OUT STD_LOGIC;
        m_axi_baseAddr_AWREADY : IN STD_LOGIC;
        m_axi_baseAddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_WVALID : OUT STD_LOGIC;
        m_axi_baseAddr_WREADY : IN STD_LOGIC;
        m_axi_baseAddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_WLAST : OUT STD_LOGIC;
        m_axi_baseAddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_ARVALID : OUT STD_LOGIC;
        m_axi_baseAddr_ARREADY : IN STD_LOGIC;
        m_axi_baseAddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_baseAddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_baseAddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_RVALID : IN STD_LOGIC;
        m_axi_baseAddr_RREADY : OUT STD_LOGIC;
        m_axi_baseAddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_baseAddr_RLAST : IN STD_LOGIC;
        m_axi_baseAddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_BVALID : IN STD_LOGIC;
        m_axi_baseAddr_BREADY : OUT STD_LOGIC;
        m_axi_baseAddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_baseAddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_baseAddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        baseAddr1 : IN STD_LOGIC_VECTOR (29 downto 0);
        spectraDataInputHW_IndexToMem : IN STD_LOGIC_VECTOR (61 downto 0);
        spectraDataWorkingSetHW_IndexT : IN STD_LOGIC_VECTOR (61 downto 0);
        m_gridSizeSqr : IN STD_LOGIC_VECTOR (31 downto 0);
        spectraIndex : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_INTERFACE_AXILITE_SLAVE_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AFAProcess_HW_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    AFAProcess_HW_INTERFACE_AXILITE_SLAVE_s_axi_U : component AFAProcess_HW_INTERFACE_AXILITE_SLAVE_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INTERFACE_AXILITE_SLAVE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INTERFACE_AXILITE_SLAVE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INTERFACE_AXILITE_SLAVE_AWVALID,
        AWREADY => s_axi_INTERFACE_AXILITE_SLAVE_AWREADY,
        AWADDR => s_axi_INTERFACE_AXILITE_SLAVE_AWADDR,
        WVALID => s_axi_INTERFACE_AXILITE_SLAVE_WVALID,
        WREADY => s_axi_INTERFACE_AXILITE_SLAVE_WREADY,
        WDATA => s_axi_INTERFACE_AXILITE_SLAVE_WDATA,
        WSTRB => s_axi_INTERFACE_AXILITE_SLAVE_WSTRB,
        ARVALID => s_axi_INTERFACE_AXILITE_SLAVE_ARVALID,
        ARREADY => s_axi_INTERFACE_AXILITE_SLAVE_ARREADY,
        ARADDR => s_axi_INTERFACE_AXILITE_SLAVE_ARADDR,
        RVALID => s_axi_INTERFACE_AXILITE_SLAVE_RVALID,
        RREADY => s_axi_INTERFACE_AXILITE_SLAVE_RREADY,
        RDATA => s_axi_INTERFACE_AXILITE_SLAVE_RDATA,
        RRESP => s_axi_INTERFACE_AXILITE_SLAVE_RRESP,
        BVALID => s_axi_INTERFACE_AXILITE_SLAVE_BVALID,
        BREADY => s_axi_INTERFACE_AXILITE_SLAVE_BREADY,
        BRESP => s_axi_INTERFACE_AXILITE_SLAVE_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => AFAProcess_HW_INTERFACE_AXILITE_SLAVE_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        baseAddr => baseAddr);

    AFAProcess_HW_gmem_m_axi_U : component AFAProcess_HW_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => AFAProcess_HW_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285 : component AFAProcess_HW_adaptNetwork_HW_integrated
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start,
        ap_done => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_done,
        ap_idle => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_idle,
        ap_ready => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_ready,
        m_axi_baseAddr_AWVALID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWVALID,
        m_axi_baseAddr_AWREADY => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREADY,
        m_axi_baseAddr_AWADDR => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWADDR,
        m_axi_baseAddr_AWID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWID,
        m_axi_baseAddr_AWLEN => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLEN,
        m_axi_baseAddr_AWSIZE => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWSIZE,
        m_axi_baseAddr_AWBURST => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWBURST,
        m_axi_baseAddr_AWLOCK => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLOCK,
        m_axi_baseAddr_AWCACHE => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWCACHE,
        m_axi_baseAddr_AWPROT => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWPROT,
        m_axi_baseAddr_AWQOS => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWQOS,
        m_axi_baseAddr_AWREGION => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREGION,
        m_axi_baseAddr_AWUSER => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWUSER,
        m_axi_baseAddr_WVALID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WVALID,
        m_axi_baseAddr_WREADY => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WREADY,
        m_axi_baseAddr_WDATA => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WDATA,
        m_axi_baseAddr_WSTRB => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WSTRB,
        m_axi_baseAddr_WLAST => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WLAST,
        m_axi_baseAddr_WID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WID,
        m_axi_baseAddr_WUSER => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WUSER,
        m_axi_baseAddr_ARVALID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARVALID,
        m_axi_baseAddr_ARREADY => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREADY,
        m_axi_baseAddr_ARADDR => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARADDR,
        m_axi_baseAddr_ARID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARID,
        m_axi_baseAddr_ARLEN => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLEN,
        m_axi_baseAddr_ARSIZE => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARSIZE,
        m_axi_baseAddr_ARBURST => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARBURST,
        m_axi_baseAddr_ARLOCK => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLOCK,
        m_axi_baseAddr_ARCACHE => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARCACHE,
        m_axi_baseAddr_ARPROT => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARPROT,
        m_axi_baseAddr_ARQOS => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARQOS,
        m_axi_baseAddr_ARREGION => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREGION,
        m_axi_baseAddr_ARUSER => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARUSER,
        m_axi_baseAddr_RVALID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RVALID,
        m_axi_baseAddr_RREADY => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RREADY,
        m_axi_baseAddr_RDATA => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RDATA,
        m_axi_baseAddr_RLAST => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RLAST,
        m_axi_baseAddr_RID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RID,
        m_axi_baseAddr_RUSER => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RUSER,
        m_axi_baseAddr_RRESP => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RRESP,
        m_axi_baseAddr_BVALID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BVALID,
        m_axi_baseAddr_BREADY => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BREADY,
        m_axi_baseAddr_BRESP => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BRESP,
        m_axi_baseAddr_BID => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BID,
        m_axi_baseAddr_BUSER => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BUSER,
        baseAddr1 => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_baseAddr1,
        currentSourceSpectrumIndex => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_currentSourceSpectrumIndex,
        spectraDataWorkingSetIndex => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_spectraDataWorkingSetIndex,
        bestMatchIndex => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_bestMatchIndex,
        adaptionThreshold => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_adaptionThreshold,
        sigmaSqr => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_sigmaSqr,
        lRate => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_lRate,
        gridSize => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_gridSize,
        gridSizeSqr => grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_gridSizeSqr);

    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301 : component AFAProcess_HW_searchBestMatchComplete_HW
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start,
        ap_done => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_done,
        ap_idle => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_idle,
        ap_ready => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_ready,
        m_axi_baseAddr_AWVALID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWVALID,
        m_axi_baseAddr_AWREADY => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWREADY,
        m_axi_baseAddr_AWADDR => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWADDR,
        m_axi_baseAddr_AWID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWID,
        m_axi_baseAddr_AWLEN => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWLEN,
        m_axi_baseAddr_AWSIZE => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWSIZE,
        m_axi_baseAddr_AWBURST => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWBURST,
        m_axi_baseAddr_AWLOCK => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWLOCK,
        m_axi_baseAddr_AWCACHE => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWCACHE,
        m_axi_baseAddr_AWPROT => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWPROT,
        m_axi_baseAddr_AWQOS => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWQOS,
        m_axi_baseAddr_AWREGION => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWREGION,
        m_axi_baseAddr_AWUSER => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWUSER,
        m_axi_baseAddr_WVALID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WVALID,
        m_axi_baseAddr_WREADY => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WREADY,
        m_axi_baseAddr_WDATA => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WDATA,
        m_axi_baseAddr_WSTRB => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WSTRB,
        m_axi_baseAddr_WLAST => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WLAST,
        m_axi_baseAddr_WID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WID,
        m_axi_baseAddr_WUSER => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WUSER,
        m_axi_baseAddr_ARVALID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARVALID,
        m_axi_baseAddr_ARREADY => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREADY,
        m_axi_baseAddr_ARADDR => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARADDR,
        m_axi_baseAddr_ARID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARID,
        m_axi_baseAddr_ARLEN => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLEN,
        m_axi_baseAddr_ARSIZE => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARSIZE,
        m_axi_baseAddr_ARBURST => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARBURST,
        m_axi_baseAddr_ARLOCK => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLOCK,
        m_axi_baseAddr_ARCACHE => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARCACHE,
        m_axi_baseAddr_ARPROT => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARPROT,
        m_axi_baseAddr_ARQOS => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARQOS,
        m_axi_baseAddr_ARREGION => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREGION,
        m_axi_baseAddr_ARUSER => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARUSER,
        m_axi_baseAddr_RVALID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RVALID,
        m_axi_baseAddr_RREADY => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RREADY,
        m_axi_baseAddr_RDATA => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RDATA,
        m_axi_baseAddr_RLAST => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RLAST,
        m_axi_baseAddr_RID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RID,
        m_axi_baseAddr_RUSER => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RUSER,
        m_axi_baseAddr_RRESP => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RRESP,
        m_axi_baseAddr_BVALID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BVALID,
        m_axi_baseAddr_BREADY => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BREADY,
        m_axi_baseAddr_BRESP => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BRESP,
        m_axi_baseAddr_BID => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BID,
        m_axi_baseAddr_BUSER => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BUSER,
        baseAddr1 => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_baseAddr1,
        spectraDataInputHW_IndexToMem => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraDataInputHW_IndexToMem,
        spectraDataWorkingSetHW_IndexT => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraDataWorkingSetHW_IndexT,
        m_gridSizeSqr => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_gridSizeSqr,
        spectraIndex => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraIndex,
        ap_return => grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_ARREADY assign process. --
    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = gmem_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = gmem_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_AWREADY assign process. --
    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)))) then 
                    ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) or ((ap_const_logic_1 = gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) or ((ap_const_logic_1 = gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) or (not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)))) then 
                    ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_WREADY assign process. --
    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)))) then 
                    ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) or ((ap_const_logic_1 = gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) or ((ap_const_logic_1 = gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) or ((ap_const_logic_1 = gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)))) then 
                    ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg assign process. --
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50))) then 
                    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_ready)) then 
                    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg assign process. --
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_ready)) then 
                    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- bmu_index1_reg_272 assign process. --
    bmu_index1_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0) and not(((tmp_reg_593 = ap_const_lv1_0) and (ap_const_logic_0 = grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_done))))) then 
                bmu_index1_reg_272 <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_return;
            elsif ((not((gmem_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((tmp_reg_593 = ap_const_lv1_0)))) then 
                bmu_index1_reg_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_reg_260 assign process. --
    i_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_reg_260 <= i_3_reg_781;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                i_reg_260 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                adaptionThreshold_reg_729 <= adaptionThreshold_fu_351_p1;
                baseAddr1_reg_708 <= baseAddr(31 downto 2);
                lRate_reg_739 <= lRate_fu_357_p1;
                sigmaSqr_reg_734 <= sigmaSqr_fu_354_p1;
                spectraDataInputHWIndexToMem_1_reg_744 <= spectraDataInputHWIndexToMem_1_fu_360_p3;
                    spectraDataInputHWIndexToMem_reg_749(61 downto 0) <= spectraDataInputHWIndexToMem_fu_366_p1(61 downto 0);
                    spectraDataWorkingSetHWIndexTo_1_reg_763(61 downto 0) <= spectraDataWorkingSetHWIndexTo_1_fu_376_p1(61 downto 0);
                spectraDataWorkingSetHWIndexTo_reg_757 <= spectraDataWorkingSetHWIndexTo_fu_370_p3;
                    spectraIndexListIndexToMem_1_c_reg_768(61 downto 0) <= spectraIndexListIndexToMem_1_c_fu_387_p1(61 downto 0);
                    tmp_2_cast_reg_724(29 downto 0) <= tmp_2_cast_fu_347_p1(29 downto 0);
                    tmp_2_reg_714(29 downto 0) <= tmp_2_fu_343_p1(29 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                adaptionThreshold_temp_reg_597 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                gmem_addr_1_reg_821 <= baseAddr2_sum3_fu_455_p2(32 - 1 downto 0);
                tmp_43_reg_810 <= tmp_43_fu_431_p2;
                tmp_47_cast_reg_815 <= tmp_47_cast_fu_437_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) then
                gmem_addr_2_reg_827 <= baseAddr2_sum4_fu_483_p2(32 - 1 downto 0);
                gmem_addr_3_reg_832 <= baseAddr2_sum5_fu_508_p2(32 - 1 downto 0);
                gmem_addr_4_reg_838 <= baseAddr2_sum6_fu_525_p2(32 - 1 downto 0);
                gmem_addr_5_reg_843 <= baseAddr2_sum7_fu_542_p2(32 - 1 downto 0);
                gmem_addr_6_reg_848 <= baseAddr2_sum8_fu_567_p2(32 - 1 downto 0);
                tmp_53_reg_853 <= tmp_53_fu_578_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (exitcond_fu_391_p2 = ap_const_lv1_0))) then
                gmem_addr_reg_786 <= baseAddr2_sum_cast_fu_416_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                i_3_reg_781 <= i_3_fu_396_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                lRate_temp_reg_617 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                m_gridSizeSqr_reg_637 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                m_gridSize_reg_627 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                m_numSpectra_reg_648 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                param_load_1_reg_668 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                param_load_3_reg_688 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((gmem_RVALID = ap_const_logic_0))) or (not((gmem_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)))) then
                reg_322 <= gmem_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                sigmaSqr_temp_reg_607 <= param_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((gmem_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then
                spectraIndex_reg_792 <= gmem_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_3_reg_663 <= param_Dout_A(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not(((tmp_reg_593 = ap_const_lv1_0) and (ap_const_logic_0 = grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_done))))) then
                tmp_45_reg_804 <= tmp_45_fu_426_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_5_reg_683 <= param_Dout_A(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_7_reg_703 <= param_Dout_A(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_reg_593 <= tmp_fu_327_p2;
            end if;
        end if;
    end process;
    tmp_2_reg_714(63 downto 30) <= "0000000000000000000000000000000000";
    tmp_2_cast_reg_724(62 downto 30) <= "000000000000000000000000000000000";
    spectraDataInputHWIndexToMem_reg_749(63 downto 62) <= "00";
    spectraDataWorkingSetHWIndexTo_1_reg_763(63 downto 62) <= "00";
    spectraIndexListIndexToMem_1_c_reg_768(62) <= '0';
    param_addr_13_reg_773(7 downto 0) <= "00010010";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, gmem_RVALID, gmem_BVALID, tmp_reg_593, exitcond_fu_391_p2, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_done, ap_sig_ioackin_gmem_ARREADY, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_done, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                if (not((exitcond_fu_391_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                if ((not((gmem_RVALID = ap_const_logic_0)) and not((tmp_reg_593 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                elsif ((not((gmem_RVALID = ap_const_logic_0)) and (tmp_reg_593 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not(((tmp_reg_593 = ap_const_lv1_0) and (ap_const_logic_0 = grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st33_fsm_32 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st34_fsm_33 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                end if;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                end if;
            when ap_ST_st38_fsm_37 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                else
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                end if;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                else
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                end if;
            when ap_ST_st45_fsm_44 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st46_fsm_45 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                end if;
            when ap_ST_st47_fsm_46 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                else
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                end if;
            when ap_ST_st48_fsm_47 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st49_fsm_48;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st49_fsm_48 => 
                if (not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                else
                    ap_NS_fsm <= ap_ST_st49_fsm_48;
                end if;
            when ap_ST_st50_fsm_49 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                else
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                end if;
            when ap_ST_st51_fsm_50 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st52_fsm_51;
                else
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                end if;
            when ap_ST_st52_fsm_51 => 
                if (not((ap_const_logic_0 = grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_done))) then
                    ap_NS_fsm <= ap_ST_st53_fsm_52;
                else
                    ap_NS_fsm <= ap_ST_st52_fsm_51;
                end if;
            when ap_ST_st53_fsm_52 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st53_fsm_52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    AFAProcess_HW_INTERFACE_AXILITE_SLAVE_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    AFAProcess_HW_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    adaptionThreshold_fu_351_p1 <= adaptionThreshold_temp_reg_597;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond_fu_391_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((exitcond_fu_391_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond_fu_391_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((exitcond_fu_391_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_D00FE5E1;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_260 assign process. --
    ap_sig_bdd_260_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_260 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_270 assign process. --
    ap_sig_bdd_270_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_270 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_286 assign process. --
    ap_sig_bdd_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_286 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_296 assign process. --
    ap_sig_bdd_296_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_296 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_306 assign process. --
    ap_sig_bdd_306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_306 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_316 assign process. --
    ap_sig_bdd_316_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_316 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_326 assign process. --
    ap_sig_bdd_326_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_326 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_336 assign process. --
    ap_sig_bdd_336_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_336 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_346 assign process. --
    ap_sig_bdd_346_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_346 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_357 assign process. --
    ap_sig_bdd_357_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_357 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_367 assign process. --
    ap_sig_bdd_367_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_367 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_378 assign process. --
    ap_sig_bdd_378_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_378 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_387 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_398 assign process. --
    ap_sig_bdd_398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_398 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_408 assign process. --
    ap_sig_bdd_408_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_408 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_439 assign process. --
    ap_sig_bdd_439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_439 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_453 assign process. --
    ap_sig_bdd_453_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_453 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_463 assign process. --
    ap_sig_bdd_463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_463 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_481 assign process. --
    ap_sig_bdd_481_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_481 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_494 assign process. --
    ap_sig_bdd_494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_494 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_632 assign process. --
    ap_sig_bdd_632_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_632 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_648 assign process. --
    ap_sig_bdd_648_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_648 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_656 assign process. --
    ap_sig_bdd_656_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_656 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_666 assign process. --
    ap_sig_bdd_666_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_666 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_698 assign process. --
    ap_sig_bdd_698_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_698 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_721 assign process. --
    ap_sig_bdd_721_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_721 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_738 assign process. --
    ap_sig_bdd_738_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_738 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_753 assign process. --
    ap_sig_bdd_753_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_753 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_761 assign process. --
    ap_sig_bdd_761_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_761 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_774 assign process. --
    ap_sig_bdd_774_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_774 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_787 assign process. --
    ap_sig_bdd_787_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_787 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_800 assign process. --
    ap_sig_bdd_800_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_800 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_811 assign process. --
    ap_sig_bdd_811_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_811 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_824 assign process. --
    ap_sig_bdd_824_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_824 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_844 assign process. --
    ap_sig_bdd_844_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_844 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_367)
    begin
        if (ap_sig_bdd_367) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_378)
    begin
        if (ap_sig_bdd_378) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_387)
    begin
        if (ap_sig_bdd_387) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_398)
    begin
        if (ap_sig_bdd_398) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_408)
    begin
        if (ap_sig_bdd_408) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_439)
    begin
        if (ap_sig_bdd_439) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_698)
    begin
        if (ap_sig_bdd_698) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_453)
    begin
        if (ap_sig_bdd_453) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_666)
    begin
        if (ap_sig_bdd_666) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_463)
    begin
        if (ap_sig_bdd_463) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_481)
    begin
        if (ap_sig_bdd_481) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_286)
    begin
        if (ap_sig_bdd_286) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_260)
    begin
        if (ap_sig_bdd_260) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_721)
    begin
        if (ap_sig_bdd_721) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_738)
    begin
        if (ap_sig_bdd_738) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_753)
    begin
        if (ap_sig_bdd_753) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_761)
    begin
        if (ap_sig_bdd_761) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_296)
    begin
        if (ap_sig_bdd_296) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_270)
    begin
        if (ap_sig_bdd_270) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_774)
    begin
        if (ap_sig_bdd_774) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_787)
    begin
        if (ap_sig_bdd_787) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_811)
    begin
        if (ap_sig_bdd_811) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_824)
    begin
        if (ap_sig_bdd_824) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_800)
    begin
        if (ap_sig_bdd_800) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_306)
    begin
        if (ap_sig_bdd_306) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_844)
    begin
        if (ap_sig_bdd_844) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_648)
    begin
        if (ap_sig_bdd_648) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_656)
    begin
        if (ap_sig_bdd_656) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st53_fsm_52 assign process. --
    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_bdd_632)
    begin
        if (ap_sig_bdd_632) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_316)
    begin
        if (ap_sig_bdd_316) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_326)
    begin
        if (ap_sig_bdd_326) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_336)
    begin
        if (ap_sig_bdd_336) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_346)
    begin
        if (ap_sig_bdd_346) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_357)
    begin
        if (ap_sig_bdd_357) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_ARREADY assign process. --
    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_AWREADY assign process. --
    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_WREADY assign process. --
    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    baseAddr1_fu_333_p4 <= baseAddr(31 downto 2);
    baseAddr2_sum3_fu_455_p2 <= std_logic_vector(unsigned(tmp_47_fu_450_p2) + unsigned(tmp_2_reg_714));
    baseAddr2_sum4_fu_483_p2 <= std_logic_vector(unsigned(tmp_48_fu_477_p2) + unsigned(tmp_2_reg_714));
    baseAddr2_sum5_fu_508_p2 <= std_logic_vector(unsigned(tmp_49_fu_503_p2) + unsigned(tmp_2_reg_714));
    baseAddr2_sum6_fu_525_p2 <= std_logic_vector(unsigned(tmp_50_fu_519_p2) + unsigned(tmp_2_reg_714));
    baseAddr2_sum7_fu_542_p2 <= std_logic_vector(unsigned(tmp_51_fu_536_p2) + unsigned(tmp_2_reg_714));
    baseAddr2_sum8_fu_567_p2 <= std_logic_vector(unsigned(tmp_52_fu_562_p2) + unsigned(tmp_2_reg_714));
    baseAddr2_sum_cast_fu_416_p1 <= std_logic_vector(resize(unsigned(baseAddr2_sum_fu_411_p2),64));
    baseAddr2_sum_fu_411_p2 <= std_logic_vector(unsigned(tmp_s_fu_406_p2) + unsigned(tmp_2_cast_reg_724));
    bmuSpectrumIndex_fu_469_p2 <= std_logic_vector(signed(tmp_44_fu_466_p1) + signed(spectraDataWorkingSetHWIndexTo_1_reg_763));
    exitcond_fu_391_p2 <= "1" when (i_reg_260 = m_numSpectra_reg_648) else "0";

    -- gmem_ARADDR assign process. --
    gmem_ARADDR_assign_proc : process(tmp_reg_593, gmem_addr_reg_786, ap_sig_cseq_ST_st24_fsm_23, gmem_addr_1_reg_821, ap_sig_cseq_ST_st26_fsm_25, gmem_addr_3_reg_832, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARADDR, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARADDR, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22, ap_reg_ioackin_gmem_ARREADY, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st38_fsm_37)
    begin
        if (((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then 
            gmem_ARADDR <= gmem_addr_3_reg_832;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARADDR <= gmem_addr_1_reg_821;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARADDR <= gmem_addr_reg_786;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARADDR <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARADDR;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARADDR <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_ARBURST assign process. --
    gmem_ARBURST_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARBURST, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARBURST, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARBURST <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARBURST;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARBURST <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    -- gmem_ARCACHE assign process. --
    gmem_ARCACHE_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARCACHE, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARCACHE, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARCACHE <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARCACHE;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARCACHE <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    -- gmem_ARID assign process. --
    gmem_ARID_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARID, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARID, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARID <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARID;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARID <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    -- gmem_ARLEN assign process. --
    gmem_ARLEN_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLEN, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLEN, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22, ap_reg_ioackin_gmem_ARREADY, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st38_fsm_37)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARLEN <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLEN;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARLEN <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_ARLOCK assign process. --
    gmem_ARLOCK_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLOCK, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLOCK, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARLOCK <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARLOCK;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARLOCK <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    -- gmem_ARPROT assign process. --
    gmem_ARPROT_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARPROT, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARPROT, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARPROT <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARPROT;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARPROT <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    -- gmem_ARQOS assign process. --
    gmem_ARQOS_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARQOS, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARQOS, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARQOS <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARQOS;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARQOS <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    -- gmem_ARREGION assign process. --
    gmem_ARREGION_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREGION, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREGION, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARREGION <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREGION;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARREGION <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    -- gmem_ARSIZE assign process. --
    gmem_ARSIZE_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARSIZE, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARSIZE, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARSIZE <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARSIZE;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARSIZE <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    -- gmem_ARUSER assign process. --
    gmem_ARUSER_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARUSER, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARUSER, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARUSER <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARUSER;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARUSER <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    -- gmem_ARVALID assign process. --
    gmem_ARVALID_assign_proc : process(tmp_reg_593, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARVALID, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARVALID, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22, ap_reg_ioackin_gmem_ARREADY, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st38_fsm_37)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_ARVALID <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARVALID;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_ARVALID <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_AWADDR assign process. --
    gmem_AWADDR_assign_proc : process(gmem_BVALID, gmem_addr_2_reg_827, gmem_addr_4_reg_838, gmem_addr_5_reg_843, gmem_addr_6_reg_848, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWADDR, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_reg_ioackin_gmem_AWREADY, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if ((not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            gmem_AWADDR <= gmem_addr_6_reg_848;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then 
            gmem_AWADDR <= gmem_addr_5_reg_843;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44))) then 
            gmem_AWADDR <= gmem_addr_4_reg_838;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWADDR <= gmem_addr_2_reg_827;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWADDR <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_AWBURST assign process. --
    gmem_AWBURST_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWBURST, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWBURST <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWBURST;
        else 
            gmem_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    -- gmem_AWCACHE assign process. --
    gmem_AWCACHE_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWCACHE, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWCACHE <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWCACHE;
        else 
            gmem_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    -- gmem_AWID assign process. --
    gmem_AWID_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWID, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWID <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWID;
        else 
            gmem_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    -- gmem_AWLEN assign process. --
    gmem_AWLEN_assign_proc : process(gmem_BVALID, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLEN, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_reg_ioackin_gmem_AWREADY, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) or (not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)))) then 
            gmem_AWLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWLEN <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_AWLOCK assign process. --
    gmem_AWLOCK_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLOCK, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWLOCK <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWLOCK;
        else 
            gmem_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    -- gmem_AWPROT assign process. --
    gmem_AWPROT_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWPROT, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWPROT <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWPROT;
        else 
            gmem_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    -- gmem_AWQOS assign process. --
    gmem_AWQOS_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWQOS, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWQOS <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWQOS;
        else 
            gmem_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    -- gmem_AWREGION assign process. --
    gmem_AWREGION_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREGION, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWREGION <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREGION;
        else 
            gmem_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    -- gmem_AWSIZE assign process. --
    gmem_AWSIZE_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWSIZE, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWSIZE <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWSIZE;
        else 
            gmem_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    -- gmem_AWUSER assign process. --
    gmem_AWUSER_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWUSER, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWUSER <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWUSER;
        else 
            gmem_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    -- gmem_AWVALID assign process. --
    gmem_AWVALID_assign_proc : process(gmem_BVALID, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWVALID, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_reg_ioackin_gmem_AWREADY, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) or (not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_AWVALID <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_BREADY assign process. --
    gmem_BREADY_assign_proc : process(gmem_BVALID, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BREADY, ap_sig_cseq_ST_st53_fsm_52, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_ioackin_gmem_AWREADY, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st49_fsm_48)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and not((gmem_BVALID = ap_const_logic_0))) or (not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) or (not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))))) then 
            gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_BREADY <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_RREADY assign process. --
    gmem_RREADY_assign_proc : process(gmem_RVALID, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st44_fsm_43, tmp_reg_593, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st24_fsm_23, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RREADY, grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RREADY, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((gmem_RVALID = ap_const_logic_0))) or (not((gmem_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) or (not((gmem_RVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (tmp_reg_593 = ap_const_lv1_0)))) then 
            gmem_RREADY <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RREADY;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_RREADY <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_WDATA assign process. --
    gmem_WDATA_assign_proc : process(reg_322, spectraIndex_reg_792, grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WDATA, bmu_index1_reg_272, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_reg_ioackin_gmem_WREADY, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if (((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            gmem_WDATA <= bmu_index1_reg_272;
        elsif (((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47))) then 
            gmem_WDATA <= spectraIndex_reg_792;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)))) then 
            gmem_WDATA <= reg_322;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_WDATA <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_WID assign process. --
    gmem_WID_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WID, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_WID <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WID;
        else 
            gmem_WID <= ap_const_lv1_0;
        end if; 
    end process;


    -- gmem_WLAST assign process. --
    gmem_WLAST_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WLAST, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_WLAST <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WLAST;
        else 
            gmem_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_WSTRB assign process. --
    gmem_WSTRB_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WSTRB, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_reg_ioackin_gmem_WREADY, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)))) then 
            gmem_WSTRB <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_WSTRB <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WSTRB;
        else 
            gmem_WSTRB <= "XXXX";
        end if; 
    end process;


    -- gmem_WUSER assign process. --
    gmem_WUSER_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WUSER, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_WUSER <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WUSER;
        else 
            gmem_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    -- gmem_WVALID assign process. --
    gmem_WVALID_assign_proc : process(grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WVALID, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st52_fsm_51, ap_reg_ioackin_gmem_WREADY, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)))) then 
            gmem_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            gmem_WVALID <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_adaptionThreshold <= adaptionThreshold_reg_729;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start <= grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_ap_start_ap_start_reg;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_baseAddr1 <= baseAddr1_reg_708;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_bestMatchIndex <= bmu_index1_reg_272;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_currentSourceSpectrumIndex <= tmp_53_reg_853;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_gridSize <= m_gridSize_reg_627;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_gridSizeSqr <= m_gridSizeSqr_reg_637;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_lRate <= lRate_reg_739;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_ARREADY <= gmem_ARREADY;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_AWREADY <= gmem_AWREADY;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BID <= gmem_BID;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BRESP <= gmem_BRESP;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BUSER <= gmem_BUSER;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_BVALID <= gmem_BVALID;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RDATA <= gmem_RDATA;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RID <= gmem_RID;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RLAST <= gmem_RLAST;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RRESP <= gmem_RRESP;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RUSER <= gmem_RUSER;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_RVALID <= gmem_RVALID;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_m_axi_baseAddr_WREADY <= gmem_WREADY;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_sigmaSqr <= sigmaSqr_reg_734;
    grp_AFAProcess_HW_adaptNetwork_HW_integrated_fu_285_spectraDataWorkingSetIndex <= spectraDataWorkingSetHWIndexTo_reg_757;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start <= grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_ap_start_ap_start_reg;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_baseAddr1 <= baseAddr1_reg_708;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_ARREADY <= gmem_ARREADY;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_AWREADY <= ap_const_logic_0;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BID <= ap_const_lv1_0;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BRESP <= ap_const_lv2_0;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BUSER <= ap_const_lv1_0;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_BVALID <= ap_const_logic_0;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RDATA <= gmem_RDATA;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RID <= gmem_RID;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RLAST <= gmem_RLAST;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RRESP <= gmem_RRESP;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RUSER <= gmem_RUSER;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_RVALID <= gmem_RVALID;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_axi_baseAddr_WREADY <= ap_const_logic_0;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_m_gridSizeSqr <= m_gridSizeSqr_reg_637;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraDataInputHW_IndexToMem <= spectraDataInputHWIndexToMem_1_reg_744;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraDataWorkingSetHW_IndexT <= spectraDataWorkingSetHWIndexTo_reg_757;
    grp_AFAProcess_HW_searchBestMatchComplete_HW_fu_301_spectraIndex <= spectraIndex_reg_792;
    i_3_fu_396_p2 <= std_logic_vector(unsigned(i_reg_260) + unsigned(ap_const_lv32_1));
    lRate_fu_357_p1 <= lRate_temp_reg_617;
    param_Addr_A <= std_logic_vector(shift_left(unsigned(param_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- param_Addr_A_orig assign process. --
    param_Addr_A_orig_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, param_addr_13_reg_773, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            param_Addr_A_orig <= std_logic_vector(resize(unsigned(param_addr_13_reg_773),32));
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            param_Addr_A_orig <= ap_const_lv64_11(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            param_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            param_Addr_A_orig <= ap_const_lv64_F(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            param_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            param_Addr_A_orig <= ap_const_lv64_D(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            param_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            param_Addr_A_orig <= ap_const_lv64_8(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            param_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            param_Addr_A_orig <= ap_const_lv64_6(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            param_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            param_Addr_A_orig <= ap_const_lv64_4(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            param_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            param_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
        else 
            param_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    param_Clk_A <= ap_clk;
    param_Din_A <= i_reg_260;

    -- param_EN_A assign process. --
    param_EN_A_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            param_EN_A <= ap_const_logic_1;
        else 
            param_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- param_Rst_A assign process. --
    param_Rst_A_assign_proc : process(ap_rst_n)
    begin
                param_Rst_A <= not(ap_rst_n);
    end process;


    -- param_WEN_A assign process. --
    param_WEN_A_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond_fu_391_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (exitcond_fu_391_p2 = ap_const_lv1_0)))) then 
            param_WEN_A <= ap_const_lv4_F;
        else 
            param_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    param_addr_13_gep_fu_252_p3 <= ap_const_lv64_12(32 - 1 downto 0);
    sigmaSqr_fu_354_p1 <= sigmaSqr_temp_reg_607;
    spectraDataInputHWIndexToMem_1_fu_360_p3 <= (param_load_1_reg_668 & tmp_3_reg_663);
    spectraDataInputHWIndexToMem_fu_366_p1 <= std_logic_vector(resize(unsigned(spectraDataInputHWIndexToMem_1_fu_360_p3),64));
    spectraDataWorkingSetHWIndexTo_1_fu_376_p1 <= std_logic_vector(resize(unsigned(spectraDataWorkingSetHWIndexTo_fu_370_p3),64));
    spectraDataWorkingSetHWIndexTo_fu_370_p3 <= (param_load_3_reg_688 & tmp_5_reg_683);
    spectraIndexListIndexToMem_1_c_fu_387_p1 <= std_logic_vector(resize(unsigned(spectraIndexListIndexToMem_1_fu_380_p3),63));
    spectraIndexListIndexToMem_1_fu_380_p3 <= (param_Dout_A & tmp_7_reg_703);
        tmp1_cast_fu_446_p1 <= std_logic_vector(resize(signed(tmp1_fu_440_p2),64));

    tmp1_fu_440_p2 <= std_logic_vector(signed(tmp_47_cast_fu_437_p1) + signed(ap_const_lv33_1CB));
        tmp2_cast_fu_499_p1 <= std_logic_vector(resize(signed(tmp2_fu_494_p2),64));

    tmp2_fu_494_p2 <= std_logic_vector(signed(tmp_47_cast_reg_815) + signed(ap_const_lv33_1CC));
        tmp3_cast_fu_558_p1 <= std_logic_vector(resize(signed(tmp3_fu_553_p2),64));

    tmp3_fu_553_p2 <= std_logic_vector(signed(tmp_47_cast_reg_815) + signed(ap_const_lv33_1CA));
    tmp_2_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(baseAddr1_fu_333_p4),63));
    tmp_2_fu_343_p1 <= std_logic_vector(resize(unsigned(baseAddr1_fu_333_p4),64));
    tmp_43_fu_431_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(bmu_index1_reg_272) * signed('0' &ap_const_lv32_1CD))), 32));
        tmp_44_fu_466_p1 <= std_logic_vector(resize(signed(tmp_43_reg_810),64));

    tmp_45_fu_426_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(spectraIndex_reg_792) * signed('0' &ap_const_lv32_1CD))), 32));
        tmp_46_fu_474_p1 <= std_logic_vector(resize(signed(tmp_45_reg_804),64));

        tmp_47_cast_fu_437_p1 <= std_logic_vector(resize(signed(tmp_45_reg_804),33));

    tmp_47_fu_450_p2 <= std_logic_vector(unsigned(spectraDataInputHWIndexToMem_reg_749) + unsigned(tmp1_cast_fu_446_p1));
    tmp_48_fu_477_p2 <= std_logic_vector(unsigned(bmuSpectrumIndex_fu_469_p2) + unsigned(ap_const_lv64_1CB));
    tmp_49_fu_503_p2 <= std_logic_vector(unsigned(spectraDataInputHWIndexToMem_reg_749) + unsigned(tmp2_cast_fu_499_p1));
    tmp_50_fu_519_p2 <= std_logic_vector(unsigned(bmuSpectrumIndex_fu_469_p2) + unsigned(ap_const_lv64_1CC));
    tmp_51_fu_536_p2 <= std_logic_vector(unsigned(bmuSpectrumIndex_fu_469_p2) + unsigned(ap_const_lv64_1CA));
    tmp_52_fu_562_p2 <= std_logic_vector(unsigned(spectraDataInputHWIndexToMem_reg_749) + unsigned(tmp3_cast_fu_558_p1));
    tmp_53_fu_578_p2 <= std_logic_vector(signed(tmp_46_fu_474_p1) + signed(spectraDataInputHWIndexToMem_reg_749));
    tmp_cast_fu_402_p1 <= std_logic_vector(resize(unsigned(i_reg_260),63));
    tmp_fu_327_p2 <= "1" when (param_Dout_A = ap_const_lv32_0) else "0";
    tmp_s_fu_406_p2 <= std_logic_vector(unsigned(tmp_cast_fu_402_p1) + unsigned(spectraIndexListIndexToMem_1_c_reg_768));
end behav;
